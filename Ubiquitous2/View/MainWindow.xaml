<Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:ignore="http://www.ignore.com"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        xmlns:Custom="http://www.galasoft.ch/mvvmlight"
        xmlns:Settings="clr-namespace:UB.Properties"
        xmlns:Interactivity="clr-namespace:UB.Interactivity" x:Name="window"
        x:Class="UB.MainWindow"        
        mc:Ignorable="d ignore"
        UseLayoutRounding="True"
        Title="Ubiquitous 2.0"   
        Style="{DynamicResource MainWindowStyle}"
        WindowStyle="None"
        Topmost="True"    
        DataContext="{Binding Source={StaticResource Locator},Path=Main}" 
        Background="{x:Null}" 
        ResizeMode="NoResize"
        Margin="0" 
        TextOptions.TextRenderingMode="Aliased"
        Padding="0" Icon="/Ubiquitous2;component/Resources/ubiquitous smile.ico" d:DesignHeight="394" Width="202.424" Height="394" Foreground="{x:Null}"
        >
    <i:Interaction.Behaviors>
        <Interactivity:WindowPersistentLocationBehavior WindowName="MainWindow"/>
        <Interactivity:ClickThroughBehavior EnableMouseTransparency="{Binding EnableMouseTransparency}"/>
    </i:Interaction.Behaviors>
    <i:Interaction.Triggers>
        <i:EventTrigger EventName="StateChanged">
            <Custom:EventToCommand Command="{Binding ChangeState}"/>
        </i:EventTrigger>
        <i:EventTrigger EventName="Closing">
            <Custom:EventToCommand Command="{Binding ExitApplication}"/>
        </i:EventTrigger>
        <i:EventTrigger EventName="MouseEnter">
            <i:InvokeCommandAction Command="{Binding ShowOverlay}"/>
        </i:EventTrigger>
        <i:EventTrigger EventName="MouseLeave">
            <i:InvokeCommandAction Command="{Binding HideOverlay}"/>
        </i:EventTrigger>
        <i:EventTrigger EventName="Activated">
            <i:InvokeCommandAction Command="{Binding SetFocused}"/>
        </i:EventTrigger>
        <i:EventTrigger EventName="Deactivated">
            <i:InvokeCommandAction Command="{Binding SetUnFocused}"/>
        </i:EventTrigger>

    </i:Interaction.Triggers>    
</Window>
