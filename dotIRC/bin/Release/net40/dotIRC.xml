<?xml version="1.0"?>
<doc>
    <assembly>
        <name>dotIRC</name>
    </assembly>
    <members>
        <member name="T:dotIRC.Collections.CollectionsUtilities">
            <summary>
            Contains common utilities for functionality relating to collections.
            </summary>
        </member>
        <member name="M:dotIRC.Collections.CollectionsUtilities.Set``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Sets the value for the specified key in a dictionary.
            If the given key already exists, overwrite its value; otherwise, add a new key/value pair.
            </summary>
            <typeparam name="TKey">The type of keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of values in the dictionary..</typeparam>
            <param name="dictionary">The dictionary in which to set the value.</param>
            <param name="key">The object to use as the key of the element to add/update.</param>
            <param name="value">The object to use as the value of the element to add/update.</param>
        </member>
        <member name="M:dotIRC.Collections.CollectionsUtilities.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds the specified items to the collection.
            </summary>
            <typeparam name="T">The type of the items in the collection.</typeparam>
            <param name="collection">The collection to which to add the items.</param>
            <param name="range">A collection of items to add to <paramref name="collection"/>.</param>
        </member>
        <member name="M:dotIRC.Collections.CollectionsUtilities.RemoveRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Removes the specified items from the collection.
            </summary>
            <typeparam name="T">The type of the items in the collection.</typeparam>
            <param name="collection">The collection fom which to remove the items.</param>
            <param name="range">A collection of items to remove from <paramref name="collection"/>.</param>
        </member>
        <member name="M:dotIRC.Collections.CollectionsUtilities.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Performs the specified action on each item in the collection.
            </summary>
            <typeparam name="T">The type of the items in the collection.</typeparam>
            <param name="source">The collection on whose items to perform the action.</param>
            <param name="action">The action to perform on each item of the collection.</param>
        </member>
        <member name="T:dotIRC.Collections.ReadOnlyDictionary`2">
            <summary>
            Represents a read-only collection of keys and values.
            </summary>
            <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
        </member>
        <member name="M:dotIRC.Collections.ReadOnlyDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:dotIRC.Collections.ReadOnlyDictionary`2"/> class.
            </summary>
            <param name="dictionary">The dictionary to wrap.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="dictionary"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:dotIRC.Collections.ReadOnlyDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the dictionary contains the specified key.
            </summary>
            <param name="key">The key to locate in the dictionary.</param>
            <returns><see langword="true"/> if the dictionary contains an element with the specified key;
            <see langword="false"/>, otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:dotIRC.Collections.ReadOnlyDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="value">When this method returns, contains the value associated with the specified key, if the
            key is found; otherwise, the default value for the type of the value parameter. This parameter is passed
            uninitialized.</param>
            <returns><see langword="true"/> if the dictionary contains an element with the specified key;
            <see langword="false"/>, otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:dotIRC.Collections.ReadOnlyDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the dictionary.
            </summary>
            <returns>An enumerator for the dictionary.</returns>
        </member>
        <member name="P:dotIRC.Collections.ReadOnlyDictionary`2.Keys">
            <summary>
            Gets a collection containing the keys in the dictionary.
            </summary>
            <value>A collection containing the keys in the dictionary.</value>
        </member>
        <member name="P:dotIRC.Collections.ReadOnlyDictionary`2.Values">
            <summary>
            Gets a collection containing the values in the dictionary.
            </summary>
            <value>A collection containing the values in the dictionary.</value>
        </member>
        <member name="P:dotIRC.Collections.ReadOnlyDictionary`2.Item(`0)">
            <summary>
            Gets or sets the element with the specified key.
            </summary>
            <value>The element with the specified key.</value>
            <exception cref="T:System.NotSupportedException">This operation is not supported on a read-only dictionary.
            </exception>
        </member>
        <member name="P:dotIRC.Collections.ReadOnlyDictionary`2.Count">
            <summary>
            Gets the number of key/value pairs contained in the dictionary.
            </summary>
            <value>The number of key/value pairs contained in the dictionary.</value>
        </member>
        <member name="T:dotIRC.Collections.ReadOnlySet`1">
            <summary>
            Represents a read-only set of values.
            </summary>
            <typeparam name="T">The type of elements in the set.</typeparam>
        </member>
        <member name="M:dotIRC.Collections.ReadOnlySet`1.#ctor(System.Collections.Generic.ISet{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:dotIRC.Collections.ReadOnlySet`1"/> class.
            </summary>
            <param name="set">The set to wrap.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="set"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:dotIRC.Collections.ReadOnlySet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether the set is a proper subset of the specified collection.
            </summary>
            <param name="other">The collection to compare to the current set.</param>
            <returns>
            <see langword="true"/> if the set is a proper subset of <paramref name="other"/>;
            <see langword="false"/>, otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:dotIRC.Collections.ReadOnlySet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether the set is a proper superset of the specified collection.
            </summary>
            <param name="other">The collection to compare to the current set.</param>
            <returns>
            <see langword="true"/> if the set is a proper superset of <paramref name="other"/>;
            <see langword="false"/>, otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:dotIRC.Collections.ReadOnlySet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether the set is a subset of the specified collection.
            </summary>
            <param name="other">The collection to compare to the current set.</param>
            <returns>
            <see langword="true"/> if the set is a subset of <paramref name="other"/>;
            <see langword="false"/>, otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:dotIRC.Collections.ReadOnlySet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether the set is a superset of the specified collection.
            </summary>
            <param name="other">The collection to compare to the current set.</param>
            <returns>
            <see langword="true"/> if the set is a superset of <paramref name="other"/>;
            <see langword="false"/>, otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:dotIRC.Collections.ReadOnlySet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether the set and the specified collection share common elements.
            </summary>
            <param name="other">The collection to compare to the current set.</param>
            <returns>
            <see langword="true"/> if the set and <paramref name="other"/> share at least one common element;
            <see langword="false"/>, otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:dotIRC.Collections.ReadOnlySet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether the set and the specified collection contain the same elements.
            </summary>
            <param name="other">The collection to compare to the current set.</param>
            <returns>
            <see langword="true"/> if the set and <paramref name="other"/> are equal;
            <see langword="false"/>, otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:dotIRC.Collections.ReadOnlySet`1.Contains(`0)">
            <summary>
            Determines whether the set contains the specified element.
            </summary>
            <param name="item">The element to locate in the set.</param>
            <returns><see langword="true"/> if the set contains the specified element;
            <see langword="false"/>, otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:dotIRC.Collections.ReadOnlySet`1.CopyTo(`0[])">
            <inheritdoc cref="M:dotIRC.Collections.ReadOnlySet`1.CopyTo(`0[],System.Int32)"/>
        </member>
        <member name="M:dotIRC.Collections.ReadOnlySet`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the set to an array.
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied from the
            set. The array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="arrayIndex"/> is greater than the length of the
            destination array.</exception>
        </member>
        <member name="M:dotIRC.Collections.ReadOnlySet`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the set.
            </summary>
            <returns>An enumerator for the set.</returns>
        </member>
        <member name="P:dotIRC.Collections.ReadOnlySet`1.Count">
            <summary>
            Gets the number of elements that are contained in the set.
            </summary>
            <value>The number of elements that are contained in the set.</value>
        </member>
        <member name="T:dotIRC.IrcServerInfo">
            <summary>
            Stores information about a particular server in an IRC network.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="F:dotIRC.IrcServerInfo.HostName">
            <summary>
            The host name of the server.
            </summary>
        </member>
        <member name="F:dotIRC.IrcServerInfo.HopCount">
            <summary>
            The hop count of the server from the local server.
            </summary>
        </member>
        <member name="F:dotIRC.IrcServerInfo.Info">
            <summary>
            A string containing arbitrary information about the server.
            </summary>
        </member>
        <member name="M:dotIRC.IrcServerInfo.#ctor(System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:dotIRC.IrcServerInfo"/> class with the specified properties.
            </summary>
            <param name="hostName">The host name of the server.</param>
            <param name="hopCount">The hop count of the server from the local server.</param>
            <param name="info">A string containing arbitrary information about the server.</param>
        </member>
        <member name="T:dotIRC.Ctcp.CtcpClient">
            <summary>
            Represents a client that communicates with a server using CTCP (Client to Client Protocol), operating over an
            IRC connection.
            
            Do not inherit this class unless the protocol itself is being extended.
            </summary>
            <remarks>
            All collection objects must be locked on the <see cref="P:System.Collections.ICollection.SyncRoot"/> object for thread-safety.
            They can however be used safely without locking within event handlers.
            </remarks>
            <threadsafety static="true" instance="true"/>
            <seealso cref="P:dotIRC.Ctcp.CtcpClient.IrcClient"/>
        </member>
        <member name="M:dotIRC.Ctcp.CtcpClient.#ctor(dotIRC.IrcClient)">
            <summary>
            Initializes a new instance of the <see cref="T:dotIRC.Ctcp.CtcpClient"/> class.
            </summary>
            <param name="ircClient">The IRC client by which the CTCP client should communicate.</param>
        </member>
        <member name="M:dotIRC.Ctcp.CtcpClient.SendAction(dotIRC.IIrcMessageTarget,System.String)">
            <inheritdoc cref="M:dotIRC.Ctcp.CtcpClient.SendAction(System.Collections.Generic.IList{dotIRC.IIrcMessageTarget},System.String)"/>
            <summary>
            Sends an action message to the specified list of users.
            </summary>
            <param name="user">The user to which to send the request.</param>
        </member>
        <member name="M:dotIRC.Ctcp.CtcpClient.SendAction(System.Collections.Generic.IList{dotIRC.IIrcMessageTarget},System.String)">
            <summary>
            Sends an action message to the specified list of users.
            </summary>
            <param name="users">A list of users to which to send the request.</param>
            <param name="text">The text of the message.</param>
        </member>
        <member name="M:dotIRC.Ctcp.CtcpClient.GetTime(dotIRC.IIrcMessageTarget)">
            <inheritdoc cref="M:dotIRC.Ctcp.CtcpClient.GetTime(System.Collections.Generic.IList{dotIRC.IIrcMessageTarget})"/>
            <summary>
            Gets the local date/time of the specified user.
            </summary>
            <param name="user">The user to which to send the request.</param>
        </member>
        <member name="M:dotIRC.Ctcp.CtcpClient.GetTime(System.Collections.Generic.IList{dotIRC.IIrcMessageTarget})">
            <summary>
            Gets the local date/time of the specified list of users.
            </summary>
            <param name="users">A list of users to which to send the request.</param>
        </member>
        <member name="M:dotIRC.Ctcp.CtcpClient.GetVersion(dotIRC.IIrcMessageTarget)">
            <inheritdoc cref="M:dotIRC.Ctcp.CtcpClient.GetVersion(System.Collections.Generic.IList{dotIRC.IIrcMessageTarget})"/>
            <summary>
            Gets the client version of the specified user.
            </summary>
            <param name="user">The user to which to send the request.</param>
        </member>
        <member name="M:dotIRC.Ctcp.CtcpClient.GetVersion(System.Collections.Generic.IList{dotIRC.IIrcMessageTarget})">
            <summary>
            Gets the client version of the specified list of users.
            </summary>
            <param name="users">A list of users to which to send the request.</param>
        </member>
        <member name="M:dotIRC.Ctcp.CtcpClient.CheckErrorOccurred(dotIRC.IIrcMessageTarget)">
            <inheritdoc cref="M:dotIRC.Ctcp.CtcpClient.CheckErrorOccurred(System.Collections.Generic.IList{dotIRC.IIrcMessageTarget})"/>
            <summary>
            Asks the specified user whether an error just occurred.
            </summary>
            <param name="user">The user to which to send the request.</param>
        </member>
        <member name="M:dotIRC.Ctcp.CtcpClient.CheckErrorOccurred(System.Collections.Generic.IList{dotIRC.IIrcMessageTarget})">
            <summary>
            Asks the specified list of users whether an error just occurred.
            </summary>
            <param name="users">A list of users to which to send the request.</param>
        </member>
        <member name="M:dotIRC.Ctcp.CtcpClient.Ping(dotIRC.IIrcMessageTarget)">
            <inheritdoc cref="M:dotIRC.Ctcp.CtcpClient.Ping(System.Collections.Generic.IList{dotIRC.IIrcMessageTarget})"/>
            <summary>
            Pings the specified user.
            </summary>
            <param name="user">The user to which to send the request.</param>
        </member>
        <member name="M:dotIRC.Ctcp.CtcpClient.Ping(System.Collections.Generic.IList{dotIRC.IIrcMessageTarget})">
            <summary>
            Pings the specified list of users.
            </summary>
            <param name="users">A list of users to which to send the request.</param>
        </member>
        <member name="M:dotIRC.Ctcp.CtcpClient.WriteMessage(System.Collections.Generic.IList{dotIRC.IIrcMessageTarget},System.String,System.String,System.Boolean)">
            <inheritdoc cref="M:dotIRC.Ctcp.CtcpClient.WriteMessage(System.Collections.Generic.IList{dotIRC.IIrcMessageTarget},dotIRC.Ctcp.CtcpClient.CtcpMessage)"/>
            <param name="tag">The tag of the message.</param>
            <param name="data">The data contained by the message.</param>
            <param name="isResponse"><see langword="true"/> if the message is a response to another message;
            <see langword="false"/>, otherwise.</param>
        </member>
        <member name="M:dotIRC.Ctcp.CtcpClient.WriteMessage(System.Collections.Generic.IList{dotIRC.IIrcMessageTarget},dotIRC.Ctcp.CtcpClient.CtcpMessage)">
            <inheritdoc cref="M:dotIRC.Ctcp.CtcpClient.WriteMessage(System.Collections.Generic.IList{dotIRC.IIrcMessageTarget},System.String,System.Boolean)"/>
            <param name="message">The message to write.</param>
            <exception cref="T:System.ArgumentException"><paramref name="message"/> contains more than 15 many parameters.
            </exception>
            <exception cref="T:System.ArgumentException">The value of <see cref="F:dotIRC.Ctcp.CtcpClient.CtcpMessage.Tag"/> of <paramref name="message"/>
            is invalid.</exception>
        </member>
        <member name="M:dotIRC.Ctcp.CtcpClient.WriteMessage(System.Collections.Generic.IList{dotIRC.IIrcMessageTarget},System.String,System.Boolean)">
            <summary>
            Writes the specified message to a target.
            </summary>
            <param name="targets">A list of the targets to which to write the message.</param>
            <param name="taggedData">The tagged data to write.</param>
            <param name="isResponse"><see langword="true"/> if the message is a response to another message;
            <see langword="false"/>, otherwise.</param>
        </member>
        <member name="M:dotIRC.Ctcp.CtcpClient.OnActionSent(dotIRC.Ctcp.CtcpMessageEventArgs)">
            <summary>
            Raises the <see cref="E:dotIRC.Ctcp.CtcpClient.ActionSent"/> event.
            </summary>
            <param name="e">The <see cref="T:dotIRC.Ctcp.CtcpMessageEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:dotIRC.Ctcp.CtcpClient.OnActionReceived(dotIRC.Ctcp.CtcpMessageEventArgs)">
            <summary>
            Raises the <see cref="E:dotIRC.Ctcp.CtcpClient.ActionReceived"/> event.
            </summary>
            <param name="e">The <see cref="T:dotIRC.Ctcp.CtcpMessageEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:dotIRC.Ctcp.CtcpClient.OnTimeResponseReceived(dotIRC.Ctcp.CtcpTimeResponseReceivedEventArgs)">
            <summary>
            Raises the <see cref="E:dotIRC.Ctcp.CtcpClient.TimeResponseReceived"/> event.
            </summary>
            <param name="e">The <see cref="T:dotIRC.Ctcp.CtcpTimeResponseReceivedEventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:dotIRC.Ctcp.CtcpClient.OnVersionResponseReceived(dotIRC.Ctcp.CtcpVersionResponseReceivedEventArgs)">
            <summary>
            Raises the <see cref="E:dotIRC.Ctcp.CtcpClient.VersionResponseReceived"/> event.
            </summary>
            <param name="e">The <see cref="T:dotIRC.Ctcp.CtcpVersionResponseReceivedEventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:dotIRC.Ctcp.CtcpClient.OnErrorMessageResponseReceived(dotIRC.Ctcp.CtcpErrorMessageReceivedEventArgs)">
            <summary>
            Raises the <see cref="E:dotIRC.Ctcp.CtcpClient.ErrorMessageReceived"/> event.
            </summary>
            <param name="e">The <see cref="T:dotIRC.Ctcp.CtcpErrorMessageReceivedEventArgs"/> instance containing the event
            data.</param>
        </member>
        <member name="M:dotIRC.Ctcp.CtcpClient.OnPingResponseReceived(dotIRC.Ctcp.CtcpPingResponseReceivedEventArgs)">
            <summary>
            Raises the <see cref="E:dotIRC.Ctcp.CtcpClient.PingResponseReceived"/> event.
            </summary>
            <param name="e">The <see cref="T:dotIRC.Ctcp.CtcpPingResponseReceivedEventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:dotIRC.Ctcp.CtcpClient.OnRawMessageSent(dotIRC.Ctcp.CtcpRawMessageEventArgs)">
            <summary>
            Raises the <see cref="E:dotIRC.Ctcp.CtcpClient.RawMessageSent"/> event.
            </summary>
            <param name="e">The <see cref="T:dotIRC.Ctcp.CtcpRawMessageEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:dotIRC.Ctcp.CtcpClient.OnRawMessageReceived(dotIRC.Ctcp.CtcpRawMessageEventArgs)">
            <summary>
            Raises the <see cref="E:dotIRC.Ctcp.CtcpClient.RawMessageReceived"/> event.
            </summary>
            <param name="e">The <see cref="T:dotIRC.Ctcp.CtcpRawMessageEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:dotIRC.Ctcp.CtcpClient.OnError(dotIRC.IrcErrorEventArgs)">
            <summary>
            Raises the <see cref="E:dotIRC.Ctcp.CtcpClient.Error"/> event.
            </summary>
            <param name="e">The <see cref="T:dotIRC.IrcErrorEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:dotIRC.Ctcp.CtcpClient.ToString">
            <summary>
            Returns a string representation of this instance.
            </summary>
            <returns>A string that represents this instance.</returns>
        </member>
        <member name="M:dotIRC.Ctcp.CtcpClient.ProcessMessageAction(dotIRC.Ctcp.CtcpClient.CtcpMessage)">
            <summary>
            Process ACTION messages received from a user.
            </summary>
            <param name="message">The message received from the user.</param>
        </member>
        <member name="M:dotIRC.Ctcp.CtcpClient.ProcessMessageTime(dotIRC.Ctcp.CtcpClient.CtcpMessage)">
            <summary>
            Process TIME messages received from a user.
            </summary>
            <param name="message">The message received from the user.</param>
        </member>
        <member name="M:dotIRC.Ctcp.CtcpClient.ProcessMessageVersion(dotIRC.Ctcp.CtcpClient.CtcpMessage)">
            <summary>
            Process VERSION messages received from a user.
            </summary>
            <param name="message">The message received from the user.</param>
        </member>
        <member name="M:dotIRC.Ctcp.CtcpClient.ProcessMessageErrMsg(dotIRC.Ctcp.CtcpClient.CtcpMessage)">
            <summary>
            Process ERRMSG messages received from a user.
            </summary>
            <param name="message">The message received from the user.</param>
        </member>
        <member name="M:dotIRC.Ctcp.CtcpClient.ProcessMessagePing(dotIRC.Ctcp.CtcpClient.CtcpMessage)">
            <summary>
            Process PING messages received from a user.
            </summary>
            <param name="message">The message received from the user.</param>
        </member>
        <member name="M:dotIRC.Ctcp.CtcpClient.SendMessageAction(System.Collections.Generic.IList{dotIRC.IIrcMessageTarget},System.String)">
            <summary>
            Sends an action message to the specified target.
            </summary>
            <param name="targets">A list of the targets of the message.</param>
            <param name="text">The message text.</param>
        </member>
        <member name="M:dotIRC.Ctcp.CtcpClient.SendMessageTime(System.Collections.Generic.IList{dotIRC.IIrcMessageTarget},System.String,System.Boolean)">
            <summary>
            Sends a request for the local date/time to the specified target.
            </summary>
            <param name="targets">A list of the targets of the message.</param>
            <param name="info">The information to send.</param>
            <param name="isResponse"><see langword="true"/> if the message is a response; <see langword="false"/>,
            otherwise.</param>
        </member>
        <member name="M:dotIRC.Ctcp.CtcpClient.SendMessageVersion(System.Collections.Generic.IList{dotIRC.IIrcMessageTarget},System.String,System.Boolean)">
            <summary>
            Sends a request or response for information about the version of the client.
            </summary>
            <param name="targets">A list of the targets of the message.</param>
            <param name="info">The information to send.</param>
            <param name="isResponse"><see langword="true"/> if the message is a response; <see langword="false"/>,
            otherwise.</param>
        </member>
        <member name="M:dotIRC.Ctcp.CtcpClient.SendMessageErrMsg(System.Collections.Generic.IList{dotIRC.IIrcMessageTarget},System.String,System.Boolean)">
            <summary>
            Sends a request for confirming that no error has occurred.
            </summary>
            <param name="targets">A list of the targets of the message.</param>
            <param name="tag">A tag that can be used for tracking the response.</param>
            <param name="isResponse"><see langword="true"/> if the message is a response; <see langword="false"/>,
            otherwise.</param>
        </member>
        <member name="M:dotIRC.Ctcp.CtcpClient.SendMessagePing(System.Collections.Generic.IList{dotIRC.IIrcMessageTarget},System.String,System.Boolean)">
            <summary>
            Sends a ping request or response to the specified target.
            </summary>
            <param name="targets">A list of the targets of the message.</param>
            <param name="info">The information to send.</param>
            <param name="isResponse"><see langword="true"/> if the message is a response; <see langword="false"/>,
            otherwise.</param>
        </member>
        <member name="P:dotIRC.Ctcp.CtcpClient.ClientVersion">
            <summary>
            Gets or sets information about the client version.
            </summary>
            <value>Information about the client version.</value>
        </member>
        <member name="P:dotIRC.Ctcp.CtcpClient.IrcClient">
            <summary>
            Gets or sets the IRC client by which the CTCP client should communicate.
            </summary>
            <value>The IRC client.</value>
        </member>
        <member name="E:dotIRC.Ctcp.CtcpClient.ActionSent">
            <summary>
            Occurs when an action has been sent to a user.
            </summary>
        </member>
        <member name="E:dotIRC.Ctcp.CtcpClient.ActionReceived">
            <summary>
            Occurs when an action has been received from a user.
            </summary>
        </member>
        <member name="E:dotIRC.Ctcp.CtcpClient.TimeResponseReceived">
            <summary>
            Occurs when a response to a date/time request has been received from a user.
            </summary>
        </member>
        <member name="E:dotIRC.Ctcp.CtcpClient.VersionResponseReceived">
            <summary>
            Occurs when a response to a version request has been received from a user.
            </summary>
        </member>
        <member name="E:dotIRC.Ctcp.CtcpClient.ErrorMessageReceived">
            <summary>
            Occurs when an error message has been received from a user. 
            </summary>
        </member>
        <member name="E:dotIRC.Ctcp.CtcpClient.PingResponseReceived">
            <summary>
            Occurs when a ping response has been received from a user.
            </summary>
        </member>
        <member name="E:dotIRC.Ctcp.CtcpClient.RawMessageSent">
            <summary>
            Occurs when a raw message has been sent to a user.
            </summary>
        </member>
        <member name="E:dotIRC.Ctcp.CtcpClient.RawMessageReceived">
            <summary>
            Occurs when a raw message has been received from a user.
            </summary>
        </member>
        <member name="E:dotIRC.Ctcp.CtcpClient.Error">
            <summary>
            Occurs when the client encounters an error during execution.
            </summary>
        </member>
        <member name="T:dotIRC.Ctcp.CtcpClient.MessageProcessor">
            <summary>
            Represents a method that processes <see cref="T:dotIRC.Ctcp.CtcpClient.CtcpMessage"/> objects.
            </summary>
            <param name="message">The message to be processed.</param>
        </member>
        <member name="T:dotIRC.Ctcp.CtcpClient.CtcpMessage">
            <summary>
            Represents a raw CTCP message that is sent/received by <see cref="T:dotIRC.Ctcp.CtcpClient"/>.
            </summary>
            <seealso cref="T:dotIRC.Ctcp.CtcpClient"/>
        </member>
        <member name="F:dotIRC.Ctcp.CtcpClient.CtcpMessage.Source">
            <summary>
            The user that sent the message.
            </summary>
        </member>
        <member name="F:dotIRC.Ctcp.CtcpClient.CtcpMessage.Targets">
            <summary>
            A list of users to which to send the message. 
            </summary>
        </member>
        <member name="F:dotIRC.Ctcp.CtcpClient.CtcpMessage.Tag">
            <summary>
            The tag of the message, that specifies the kind of data it contains or the type of the request.
            </summary>
        </member>
        <member name="F:dotIRC.Ctcp.CtcpClient.CtcpMessage.Data">
            <summary>
            The data contained by the message.
            </summary>
        </member>
        <member name="F:dotIRC.Ctcp.CtcpClient.CtcpMessage.IsResponse">
            <summary>
            <see langword="true"/> if this message is a response to another message; <see langword="false"/>,
            otherwise.
            </summary>
        </member>
        <member name="M:dotIRC.Ctcp.CtcpClient.CtcpMessage.#ctor(dotIRC.IrcUser,System.Collections.Generic.IList{dotIRC.IIrcMessageTarget},System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:dotIRC.Ctcp.CtcpClient.CtcpMessage"/> structure.
            </summary>
            <param name="source">The source of the message.</param>
            <param name="targets">A list of the targets of the message.</param>
            <param name="tag">The tag of the message.</param>
            <param name="data">The data contained by the message, or <see langword="null"/> for no data.</param>
            <param name="isResponse"><see langword="true"/> if the message is a response to another message; 
            <see langword="false"/>, otherwise.</param>
        </member>
        <member name="M:dotIRC.Ctcp.CtcpClient.CtcpMessage.ToString">
            <summary>
            Returns a string representation of this instance.
            </summary>
            <returns>A string that represents this instance.</returns>
        </member>
        <member name="T:dotIRC.Ctcp.CtcpMessageEventArgs">
            <summary>
            Provides data for events that are raised when a CTCP message or notice is sent or received.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:dotIRC.Ctcp.CtcpMessageEventArgs.#ctor(dotIRC.IrcUser,System.Collections.Generic.IList{dotIRC.IIrcMessageTarget},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:dotIRC.Ctcp.CtcpMessageEventArgs"/> class.
            </summary>
            <param name="source">The source of the message.</param>
            <param name="targets">A list of the targets of the message.</param>
            <param name="text">The text of the message.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="targets"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="text"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:dotIRC.Ctcp.CtcpMessageEventArgs.Source">
            <summary>
            Gets the source of the message.
            </summary>
            <value>The source of the message.</value>
        </member>
        <member name="P:dotIRC.Ctcp.CtcpMessageEventArgs.Targets">
            <summary>
            Gets a list of the targets of the message.
            </summary>
            <value>The targets of the message.</value>
        </member>
        <member name="P:dotIRC.Ctcp.CtcpMessageEventArgs.Text">
            <summary>
            Gets the text of the message.
            </summary>
            <value>The text of the message.</value>
        </member>
        <member name="T:dotIRC.Ctcp.CtcpTimeResponseReceivedEventArgs">
            <summary>
            Provides data for the <see cref="E:dotIRC.Ctcp.CtcpClient.TimeResponseReceived"/> event.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="T:dotIRC.Ctcp.CtcpResponseReceivedEventArgs">
            <summary>
            Provides data for events that indicate a response to a CTCP request.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:dotIRC.Ctcp.CtcpResponseReceivedEventArgs.#ctor(dotIRC.IrcUser)">
            <summary>
            Initializes a new instance of the <see cref="T:dotIRC.Ctcp.CtcpResponseReceivedEventArgs"/> class.
            </summary>
            <param name="user">The user from which the response was received.</param>
        </member>
        <member name="P:dotIRC.Ctcp.CtcpResponseReceivedEventArgs.User">
            <summary>
            Gets the user from which the response was received.
            </summary>
            <value>The user from which the request was received.</value>
        </member>
        <member name="M:dotIRC.Ctcp.CtcpTimeResponseReceivedEventArgs.#ctor(dotIRC.IrcUser,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:dotIRC.Ctcp.CtcpTimeResponseReceivedEventArgs"/> class.
            </summary>
            <param name="dateTime">The local date/time received from the user.</param>
        </member>
        <member name="P:dotIRC.Ctcp.CtcpTimeResponseReceivedEventArgs.DateTime">
            <summary>
            Gets the local date/time for the user.
            </summary>
            <value>The local date/time for the user.</value>
        </member>
        <member name="T:dotIRC.Ctcp.CtcpVersionResponseReceivedEventArgs">
            <summary>
            Provides data for the <see cref="E:dotIRC.Ctcp.CtcpClient.VersionResponseReceived"/> event.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:dotIRC.Ctcp.CtcpVersionResponseReceivedEventArgs.#ctor(dotIRC.IrcUser,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:dotIRC.Ctcp.CtcpVersionResponseReceivedEventArgs"/> class.
            </summary>
            <param name="versionInfo">The information about the client version.</param>
        </member>
        <member name="P:dotIRC.Ctcp.CtcpVersionResponseReceivedEventArgs.VersionInfo">
            <summary>
            Gets the information about the client version of the user.
            </summary>
            <value>The ping time.</value>
        </member>
        <member name="T:dotIRC.Ctcp.CtcpErrorMessageReceivedEventArgs">
            <summary>
            Provides data for the <see cref="E:dotIRC.Ctcp.CtcpClient.ErrorMessageReceived"/> event.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:dotIRC.Ctcp.CtcpErrorMessageReceivedEventArgs.#ctor(dotIRC.IrcUser,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:dotIRC.Ctcp.CtcpErrorMessageReceivedEventArgs"/> class,
            specifying that no error occurred.
            </summary>
            <param name="noErrorMessage">The message indicating that no error occurred.</param>
        </member>
        <member name="M:dotIRC.Ctcp.CtcpErrorMessageReceivedEventArgs.#ctor(dotIRC.IrcUser,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:dotIRC.Ctcp.CtcpErrorMessageReceivedEventArgs"/> class,
            specifying the query that failed with an error message.
            </summary>
            <param name="failedQuery">A string containing the query that failed.</param>
            <param name="errorMessage">The message describing the error that occurred for the remote user.</param>
        </member>
        <member name="P:dotIRC.Ctcp.CtcpErrorMessageReceivedEventArgs.ErrorOccurred">
            <summary>
            Gets a value indicating whether an error occurred or the user confirmed that no error occurred.
            </summary>
            <value><see langword="true"/> if an error occurred; <see langword="false"/> if the remote user confirmed
            that no error occurred.</value>
        </member>
        <member name="P:dotIRC.Ctcp.CtcpErrorMessageReceivedEventArgs.FailedQuery">
            <summary>
            Gets a string containing the query that failed
            </summary>
            <value>The failed query.</value>
        </member>
        <member name="P:dotIRC.Ctcp.CtcpErrorMessageReceivedEventArgs.ErrorMessage">
            <summary>
            Gets message describing the error that occurred for the remote user.
            </summary>
            <value>The error message.</value>
        </member>
        <member name="T:dotIRC.Ctcp.CtcpPingResponseReceivedEventArgs">
            <summary>
            Provides data for the <see cref="E:dotIRC.Ctcp.CtcpClient.PingResponseReceived"/> event.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:dotIRC.Ctcp.CtcpPingResponseReceivedEventArgs.#ctor(dotIRC.IrcUser,System.TimeSpan)">
            <inheritdoc/>
            <summary>
            Initializes a new instance of the <see cref="T:dotIRC.Ctcp.CtcpPingResponseReceivedEventArgs"/> class.
            </summary>
            <param name="pingTime">The ping time.</param>
        </member>
        <member name="P:dotIRC.Ctcp.CtcpPingResponseReceivedEventArgs.PingTime">
            <summary>
            Gets the duration of time elapsed between the sending of the ping request and the receiving of the ping
            response.
            </summary>
            <value>The ping time.</value>
        </member>
        <member name="T:dotIRC.Ctcp.CtcpRawMessageEventArgs">
            <summary>
            Provides data for the <see cref="E:dotIRC.Ctcp.CtcpClient.RawMessageSent"/> and
            <see cref="E:dotIRC.Ctcp.CtcpClient.RawMessageReceived"/> events.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:dotIRC.Ctcp.CtcpRawMessageEventArgs.#ctor(dotIRC.Ctcp.CtcpClient.CtcpMessage)">
            <summary>
            Initializes a new instance of the <see cref="T:dotIRC.Ctcp.CtcpRawMessageEventArgs"/> class.
            </summary>
            <param name="message">The message that was sent/received.</param>
        </member>
        <member name="P:dotIRC.Ctcp.CtcpRawMessageEventArgs.Message">
            <summary>
            Gets the message that was sent/received by the client.
            </summary>
            <value>The message that was sent/received by the client.</value>
        </member>
        <member name="T:dotIRC.IrcChannelInfo">
            <summary>
            Stores information about a particular channel on an IRC network.
            </summary>
        </member>
        <member name="F:dotIRC.IrcChannelInfo.Name">
            <summary>
            The name of the channel.
            </summary>
        </member>
        <member name="F:dotIRC.IrcChannelInfo.VisibleUsersCount">
            <summary>
            The number of visible users in the channel.
            </summary>
        </member>
        <member name="F:dotIRC.IrcChannelInfo.Topic">
            <summary>
            The current topic of the channel.
            </summary>
        </member>
        <member name="M:dotIRC.IrcChannelInfo.#ctor(System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:dotIRC.IrcChannelInfo"/> structure with the specified properties.
            </summary>
            <param name="name">The name of the channel.</param>
            <param name="visibleUsersCount">The number of visible users in the channel.</param>
            <param name="topic">The current topic of the channel.</param>
        </member>
        <member name="T:dotIRC.IrcNetworkInfo">
            <summary>
            Stores information about a specific IRC network.
            </summary>
        </member>
        <member name="F:dotIRC.IrcNetworkInfo.VisibleUsersCount">
            <summary>
            The number of visible users on the network.
            </summary>
        </member>
        <member name="F:dotIRC.IrcNetworkInfo.InvisibleUsersCount">
            <summary>
            The number of invisible users on the network.
            </summary>
        </member>
        <member name="F:dotIRC.IrcNetworkInfo.ServersCount">
            <summary>
            The number of servers in the network.
            </summary>
        </member>
        <member name="F:dotIRC.IrcNetworkInfo.OperatorsCount">
            <summary>
            The number of operators on the network.
            </summary>
        </member>
        <member name="F:dotIRC.IrcNetworkInfo.UnknownConnectionsCount">
            <summary>
            The number of unknown connections to the network.
            </summary>
        </member>
        <member name="F:dotIRC.IrcNetworkInfo.ChannelsCount">
            <summary>
            The number of channels that currently exist on the network.
            </summary>
        </member>
        <member name="F:dotIRC.IrcNetworkInfo.ServerClientsCount">
            <summary>
            The number of clients connected to the server.
            </summary>
        </member>
        <member name="F:dotIRC.IrcNetworkInfo.ServerServersCount">
            <summary>
            The number of others servers connected to the server.
            </summary>
        </member>
        <member name="T:dotIRC.IrcServiceRegistrationInfo">
            <summary>
            Provides information used by an <see cref="T:dotIRC.IrcClient"/> for registering the connection as a service.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="T:dotIRC.IrcRegistrationInfo">
            <summary>
            Provides information used by an <see cref="T:dotIRC.IrcClient"/> for registering the connection with the server.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:dotIRC.IrcRegistrationInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:dotIRC.IrcRegistrationInfo"/> class.
            </summary>
        </member>
        <member name="P:dotIRC.IrcRegistrationInfo.Password">
            <summary>
            Gets or sets the password for registering with the server.
            </summary>
            <value>The password for registering with the server.</value>
        </member>
        <member name="P:dotIRC.IrcRegistrationInfo.NickName">
            <summary>
            Gets or sets the nick name of the local user to set initially upon registration.
            The nick name can be changed after registration.
            </summary>
            <value>The initial nick name of the local user.</value>
        </member>
        <member name="M:dotIRC.IrcServiceRegistrationInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:dotIRC.IrcServiceRegistrationInfo"/> class.
            </summary>
        </member>
        <member name="P:dotIRC.IrcServiceRegistrationInfo.Distribution">
            <summary>
            Gets or sets the distribution of the service, which determines its visibility to users on specific servers.
            </summary>
            <value>A wildcard expression for matching against the names of servers on which the service should be
            visible.</value>
        </member>
        <member name="P:dotIRC.IrcServiceRegistrationInfo.Description">
            <summary>
            Gets or sets the description of the service to set upon registration.
            The description cannot later be changed.
            </summary>
            <value>A description of the service.</value>
        </member>
        <member name="T:dotIRC.IrcUserRegistrationInfo">
            <summary>
            Provides information used by an <see cref="T:dotIRC.IrcClient"/> for registering the connection as a user.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:dotIRC.IrcUserRegistrationInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:dotIRC.IrcUserRegistrationInfo"/> class.
            </summary>
        </member>
        <member name="P:dotIRC.IrcUserRegistrationInfo.UserName">
            <summary>
            Gets or sets the user name of the local user to set upon registration.
            The user name cannot later be changed.
            </summary>
            <value>The user name of the local user.</value>
        </member>
        <member name="P:dotIRC.IrcUserRegistrationInfo.RealName">
            <summary>
            Gets or sets the real name of the local user to set upon registration.
            The real name cannot later be changed.
            </summary>
            <value>The real name of the local user.</value>
        </member>
        <member name="P:dotIRC.IrcUserRegistrationInfo.UserModes">
            <summary>
            Gets or sets the modes of the local user to set initially.
            The collection should not contain any characters except 'w' or 'i'.
            The modes can be changed after registration.
            </summary>
            <value>A collection of modes to set on the local user.</value>
        </member>
        <member name="T:dotIRC.IrcServerStatisticalEntry">
            <summary>
            Stores a statistical entry for an IRC server.
            </summary>
        </member>
        <member name="F:dotIRC.IrcServerStatisticalEntry.Type">
            <summary>
            The type of the statistical entry.
            </summary>
        </member>
        <member name="F:dotIRC.IrcServerStatisticalEntry.Parameters">
            <summary>
            The list of parameters of the statistical entry.
            </summary>
        </member>
        <member name="T:dotIRC.IrcServerStatisticalEntryCommonType">
            <summary>
            Defines the types of statistical entries for an IRC server.
            </summary>
            <remarks>
            These entry types correspond to the STATS replies described in the RFC for the IRC protocol.
            </remarks>
        </member>
        <member name="F:dotIRC.IrcServerStatisticalEntryCommonType.Connection">
            <summary>
            An active connection to the server.
            </summary>
        </member>
        <member name="F:dotIRC.IrcServerStatisticalEntryCommonType.Command">
            <summary>
            A command supported by the server.
            </summary>
        </member>
        <member name="F:dotIRC.IrcServerStatisticalEntryCommonType.AllowedServerConnect">
            <summary>
            A server to which the local server may connect.
            </summary>
        </member>
        <member name="F:dotIRC.IrcServerStatisticalEntryCommonType.AllowedServerAccept">
            <summary>
            A server from which the local server may accept connections.
            </summary>
        </member>
        <member name="F:dotIRC.IrcServerStatisticalEntryCommonType.AllowedClient">
            <summary>
            A client that may connect to the server.
            </summary>
        </member>
        <member name="F:dotIRC.IrcServerStatisticalEntryCommonType.BannedClient">
            <summary>
             A client that is banned from connecting to the server.
            </summary>
        </member>
        <member name="F:dotIRC.IrcServerStatisticalEntryCommonType.ConnectionClass">
            <summary>
            A connection class defined by the server.
            </summary>
        </member>
        <member name="F:dotIRC.IrcServerStatisticalEntryCommonType.LeafDepth">
            <summary>
            The leaf depth of a server in the network.
            </summary>
        </member>
        <member name="F:dotIRC.IrcServerStatisticalEntryCommonType.Uptime">
            <summary>
            The uptime of the server.
            </summary>
        </member>
        <member name="F:dotIRC.IrcServerStatisticalEntryCommonType.AllowedOperator">
            <summary>
            An operator on the server.
            </summary>
        </member>
        <member name="F:dotIRC.IrcServerStatisticalEntryCommonType.HubServer">
            <summary>
            A hub server within the network.
            </summary>
        </member>
        <member name="T:dotIRC.IrcStandardFloodPreventer">
            <summary>
            Represents a flood protector that throttles data sent by the client according to the standard rules implemented
            by modern IRC servers.
            </summary>
            <remarks>
            The principle is that no message may be sent by the client once the value of an internal counter has reached
            the value of <see cref="P:dotIRC.IrcStandardFloodPreventer.MaxMessageBurst"/>. The counter is incremented every time a message is sent, and
            decremented by one every duration of <see cref="P:dotIRC.IrcStandardFloodPreventer.CounterPeriod"/>. Hence, messages may be sent immediately in
            bursts so long as the high rate is not sustained, else a delay is introduced between the sending of
            successive messages, such that the data.
            </remarks>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="T:dotIRC.IIrcFloodPreventer">
            <summary>
            Defines a mechanism for preventing server floods by limiting the rate of outgoing raw messages from the client.
            </summary>
        </member>
        <member name="M:dotIRC.IIrcFloodPreventer.GetSendDelay">
            <summary>
            Gets the time delay before which the client may currently send the next message.
            </summary>
            <returns>The time delay before the next message may be sent, in milliseconds.</returns>
        </member>
        <member name="M:dotIRC.IIrcFloodPreventer.HandleMessageSent">
            <summary>
            Notifies the flood preventer that a message has just been send by the client.
            </summary>
        </member>
        <member name="M:dotIRC.IrcStandardFloodPreventer.#ctor(System.Int32,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:dotIRC.IrcStandardFloodPreventer"/> class.
            </summary>
            <param name="maxMessageBurst">The maximum number of messages that can be sent in a burst.</param>
            <param name="counterPeriod">The number of milliseconds between each decrement of the message counter.
            </param>
        </member>
        <member name="M:dotIRC.IrcStandardFloodPreventer.GetSendDelay">
            <inheritdoc/>
        </member>
        <member name="M:dotIRC.IrcStandardFloodPreventer.HandleMessageSent">
            <inheritdoc/>
        </member>
        <member name="P:dotIRC.IrcStandardFloodPreventer.MaxMessageBurst">
            <summary>
            Gets the maximum message number of messages that can be sent in a burst.
            </summary>
            <value>The maximum message number of messages that can be sent in a burst..</value>
        </member>
        <member name="P:dotIRC.IrcStandardFloodPreventer.CounterPeriod">
            <summary>
            Gets the number of milliseconds between each decrement of the message counter.
            </summary>
            <value>The period of the counter, in milliseconds.</value>
        </member>
        <member name="T:dotIRC.IIrcMessageSendHandler">
            <summary>
            Represents an object that handles messages and notices sent by an IRC client.
            </summary>
        </member>
        <member name="M:dotIRC.IIrcMessageSendHandler.HandleMessageSent(System.Collections.Generic.IList{dotIRC.IIrcMessageTarget},System.String)">
            <summary>
            Handles the specified message that was sent by the client.
            </summary>
            <param name="targets">A collection of the target of the message.</param>
            <param name="text">The text of the message.</param>
        </member>
        <member name="M:dotIRC.IIrcMessageSendHandler.HandleNoticeSent(System.Collections.Generic.IList{dotIRC.IIrcMessageTarget},System.String)">
            <summary>
            Handles the specified notice that was sent by the client.
            </summary>
            <param name="targets">A collection of the target of the notice.</param>
            <param name="text">The text of the message.</param>
        </member>
        <member name="T:dotIRC.IIrcMessageReceiveHandler">
            <summary>
            Represents an object that handles messages and notices received by an IRC client.
            </summary>
        </member>
        <member name="M:dotIRC.IIrcMessageReceiveHandler.HandleMessageReceived(dotIRC.IIrcMessageSource,System.Collections.Generic.IList{dotIRC.IIrcMessageTarget},System.String)">
            <summary>
            Handles the specified message that was received by the client.
            </summary>
            <param name="source">The source of the message.</param>
            <param name="targets">A collection of the target of the message.</param>
            <param name="text">The text of the message.</param>
        </member>
        <member name="M:dotIRC.IIrcMessageReceiveHandler.HandleNoticeReceived(dotIRC.IIrcMessageSource,System.Collections.Generic.IList{dotIRC.IIrcMessageTarget},System.String)">
            <summary>
            Handles the specified notice that was received by the client.
            </summary>
            <param name="source">The source of the notice.</param>
            <param name="targets">A collection of the target of the notice.</param>
            <param name="text">The text of the message.</param>
        </member>
        <member name="T:dotIRC.IIrcMessageSource">
            <summary>
            Represents the source of a message or notice sent by an IRC client.
            </summary>
        </member>
        <member name="P:dotIRC.IIrcMessageSource.Name">
            <summary>
            Gets the name of the source, as understood by the IRC protocol.
            </summary>
            <value>The name of the source.</value>
        </member>
        <member name="T:dotIRC.IIrcMessageReceiver">
            <summary>
            Represents an object that raises an event when a message or notice has been received.
            </summary>
        </member>
        <member name="E:dotIRC.IIrcMessageReceiver.MessageReceived">
            <summary>
            Occurs when a message has been received by the object.
            </summary>
        </member>
        <member name="E:dotIRC.IIrcMessageReceiver.NoticeReceived">
            <summary>
            Occurs when a notice has been received by the object.
            </summary>
        </member>
        <member name="T:dotIRC.IIrcMessageTarget">
            <summary>
            Represents the target of a message or notice sent by an IRC client.
            </summary>
        </member>
        <member name="P:dotIRC.IIrcMessageTarget.Name">
            <summary>
            Gets the name of the source, as understood by the IRC protocol.
            </summary>
            <value>The name of the target.</value>
        </member>
        <member name="T:dotIRC.IrcChannelUserCollection">
            <summary>
            Represents a collection of <see cref="T:dotIRC.IrcChannelUser"/> objects.
            </summary>
            <threadsafety static="true" instance="false"/>
            <seealso cref="T:dotIRC.IrcChannelUser"/>
        </member>
        <member name="M:dotIRC.IrcChannelUserCollection.GetUsers">
            <summary>
            Gets a collection of all users that correspond to the channel users in the collection.
            </summary>
            <returns>A collection of users.</returns>
        </member>
        <member name="P:dotIRC.IrcChannelUserCollection.Channel">
            <summary>
            Gets the channel to which the collection of channel users belongs.
            </summary>
            <value>The channel to which the collection of channel users belongs..</value>
        </member>
        <member name="T:dotIRC.IrcClient">
            <summary>
            Represents a client that communicates with a server using the IRC (Internet Relay Chat) protocol.
            
            Do not inherit this class unless the protocol itself is being extended.
            </summary>
            <remarks>
            All collection objects must be locked on the <see cref="P:System.Collections.ICollection.SyncRoot"/> object for thread-safety.
            They can however be used safely without locking within event handlers.
            </remarks>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:dotIRC.IrcClient.ProcessMessageNick(dotIRC.IrcClient.IrcMessage)">
            <summary>
            Process NICK messages received from the server.
            </summary>
            <param name="message">The message received from the server.</param>
        </member>
        <member name="M:dotIRC.IrcClient.ProcessMessageQuit(dotIRC.IrcClient.IrcMessage)">
            <summary>
            Process QUIT messages received from the server.
            </summary>
            <param name="message">The message received from the server.</param>
        </member>
        <member name="M:dotIRC.IrcClient.ProcessMessageJoin(dotIRC.IrcClient.IrcMessage)">
            <summary>
            Process JOIN messages received from the server.
            </summary>
            <param name="message">The message received from the server.</param>
        </member>
        <member name="M:dotIRC.IrcClient.ProcessMessagePart(dotIRC.IrcClient.IrcMessage)">
            <summary>
            Process PART messages received from the server.
            </summary>
            <param name="message">The message received from the server.</param>
        </member>
        <member name="M:dotIRC.IrcClient.ProcessMessageMode(dotIRC.IrcClient.IrcMessage)">
            <summary>
            Process MODE messages received from the server.
            </summary>
            <param name="message">The message received from the server.</param>
        </member>
        <member name="M:dotIRC.IrcClient.ProcessMessageTopic(dotIRC.IrcClient.IrcMessage)">
            <summary>
            Process TOPIC messages received from the server.
            </summary>
            <param name="message">The message received from the server.</param>
        </member>
        <member name="M:dotIRC.IrcClient.ProcessMessageKick(dotIRC.IrcClient.IrcMessage)">
            <summary>
            Process KICK messages received from the server.
            </summary>
            <param name="message">The message received from the server.</param>
        </member>
        <member name="M:dotIRC.IrcClient.ProcessMessageInvite(dotIRC.IrcClient.IrcMessage)">
            <summary>
            Process INVITE messages received from the server.
            </summary>
            <param name="message">The message received from the server.</param>
        </member>
        <member name="M:dotIRC.IrcClient.ProcessMessagePrivateMessage(dotIRC.IrcClient.IrcMessage)">
            <summary>
            Process PRIVMSG messages received from the server.
            </summary>
            <param name="message">The message received from the server.</param>
        </member>
        <member name="M:dotIRC.IrcClient.ProcessMessageNotice(dotIRC.IrcClient.IrcMessage)">
            <summary>
            Process NOTICE messages received from the server.
            </summary>
            <param name="message">The message received from the server.</param>
        </member>
        <member name="M:dotIRC.IrcClient.ProcessMessagePing(dotIRC.IrcClient.IrcMessage)">
            <summary>
            Process PING messages received from the server.
            </summary>
            <param name="message">The message received from the server.</param>
        </member>
        <member name="M:dotIRC.IrcClient.ProcessMessagePong(dotIRC.IrcClient.IrcMessage)">
            <summary>
            Process PONG messages received from the server.
            </summary>
            <param name="message">The message received from the server.</param>
        </member>
        <member name="M:dotIRC.IrcClient.ProcessMessageError(dotIRC.IrcClient.IrcMessage)">
            <summary>
            Process ERROR messages received from the server.
            </summary>
            <param name="message">The message received from the server.</param>
        </member>
        <member name="M:dotIRC.IrcClient.ProcessMessageReplyWelcome(dotIRC.IrcClient.IrcMessage)">
            <summary>
            Process RPL_WELCOME responses from the server.
            </summary>
            <param name="message">The message received from the server.</param>
        </member>
        <member name="M:dotIRC.IrcClient.ProcessMessageReplyYourHost(dotIRC.IrcClient.IrcMessage)">
            <summary>
            Process RPL_YOURHOST responses from the server.
            </summary>
            <param name="message">The message received from the server.</param>
        </member>
        <member name="M:dotIRC.IrcClient.ProcessMessageReplyCreated(dotIRC.IrcClient.IrcMessage)">
            <summary>
            Process RPL_CREATED responses from the server.
            </summary>
            <param name="message">The message received from the server.</param>
        </member>
        <member name="M:dotIRC.IrcClient.ProcessMessageReplyMyInfo(dotIRC.IrcClient.IrcMessage)">
            <summary>
            Process RPL_MYINFO responses from the server.
            </summary>
            <param name="message">The message received from the server.</param>
        </member>
        <member name="M:dotIRC.IrcClient.ProcessMessageReplyBounceOrISupport(dotIRC.IrcClient.IrcMessage)">
            <summary>
            Process RPL_BOUNCE and RPL_ISUPPORT responses from the server.
            </summary>
            <param name="message">The message received from the server.</param>
        </member>
        <member name="M:dotIRC.IrcClient.ProcessMessageStatsLinkInfo(dotIRC.IrcClient.IrcMessage)">
            <summary>
            Process RPL_STATSLINKINFO responses from the server.
            </summary>
            <param name="message">The message received from the server.</param>
        </member>
        <member name="M:dotIRC.IrcClient.ProcessMessageStatsCommands(dotIRC.IrcClient.IrcMessage)">
            <summary>
            Process RPL_STATSCOMMANDS responses from the server.
            </summary>
            <param name="message">The message received from the server.</param>
        </member>
        <member name="M:dotIRC.IrcClient.ProcessMessageStatsCLine(dotIRC.IrcClient.IrcMessage)">
            <summary>
            Process RPL_STATSCLINE responses from the server.
            </summary>
            <param name="message">The message received from the server.</param>
        </member>
        <member name="M:dotIRC.IrcClient.ProcessMessageStatsNLine(dotIRC.IrcClient.IrcMessage)">
            <summary>
            Process RPL_STATSNLINE responses from the server.
            </summary>
            <param name="message">The message received from the server.</param>
        </member>
        <member name="M:dotIRC.IrcClient.ProcessMessageStatsILine(dotIRC.IrcClient.IrcMessage)">
            <summary>
            Process RPL_STATSILINE responses from the server.
            </summary>
            <param name="message">The message received from the server.</param>
        </member>
        <member name="M:dotIRC.IrcClient.ProcessMessageStatsKLine(dotIRC.IrcClient.IrcMessage)">
            <summary>
            Process RPL_STATSKLINE responses from the server.
            </summary>
            <param name="message">The message received from the server.</param>
        </member>
        <member name="M:dotIRC.IrcClient.ProcessMessageStatsYLine(dotIRC.IrcClient.IrcMessage)">
            <summary>
            Process RPL_STATSYLINE responses from the server.
            </summary>
            <param name="message">The message received from the server.</param>
        </member>
        <member name="M:dotIRC.IrcClient.ProcessMessageEndOfStats(dotIRC.IrcClient.IrcMessage)">
            <summary>
            Process RPL_ENDOFSTATS responses from the server.
            </summary>
            <param name="message">The message received from the server.</param>
        </member>
        <member name="M:dotIRC.IrcClient.ProcessMessageStatsLLine(dotIRC.IrcClient.IrcMessage)">
            <summary>
            Process RPL_STATSLLINE responses from the server.
            </summary>
            <param name="message">The message received from the server.</param>
        </member>
        <member name="M:dotIRC.IrcClient.ProcessMessageStatsUpTime(dotIRC.IrcClient.IrcMessage)">
            <summary>
            Process RPL_STATSUPTIME responses from the server.
            </summary>
            <param name="message">The message received from the server.</param>
        </member>
        <member name="M:dotIRC.IrcClient.ProcessMessageStatsOLine(dotIRC.IrcClient.IrcMessage)">
            <summary>
            Process RPL_STATSOLINE responses from the server.
            </summary>
            <param name="message">The message received from the server.</param>
        </member>
        <member name="M:dotIRC.IrcClient.ProcessMessageStatsHLine(dotIRC.IrcClient.IrcMessage)">
            <summary>
            Process RPL_STATSHLINE responses from the server.
            </summary>
            <param name="message">The message received from the server.</param>
        </member>
        <member name="M:dotIRC.IrcClient.ProcessMessageLUserClient(dotIRC.IrcClient.IrcMessage)">
            <summary>
            Process RPL_LUSERCLIENT responses from the server.
            </summary>
            <param name="message">The message received from the server.</param>
        </member>
        <member name="M:dotIRC.IrcClient.ProcessMessageLUserOp(dotIRC.IrcClient.IrcMessage)">
            <summary>
            Process RPL_LUSEROP responses from the server.
            </summary>
            <param name="message">The message received from the server.</param>
        </member>
        <member name="M:dotIRC.IrcClient.ProcessMessageLUserUnknown(dotIRC.IrcClient.IrcMessage)">
            <summary>
            Process RPL_LUSERUNKNOWN responses from the server.
            </summary>
            <param name="message">The message received from the server.</param>
        </member>
        <member name="M:dotIRC.IrcClient.ProcessMessageLUserChannels(dotIRC.IrcClient.IrcMessage)">
            <summary>
            Process RPL_LUSERCHANNELS responses from the server.
            </summary>
            <param name="message">The message received from the server.</param>
        </member>
        <member name="M:dotIRC.IrcClient.ProcessMessageLUserMe(dotIRC.IrcClient.IrcMessage)">
            <summary>
            Process RPL_LUSERME responses from the server.
            </summary>
            <param name="message">The message received from the server.</param>
        </member>
        <member name="M:dotIRC.IrcClient.ProcessMessageReplyAway(dotIRC.IrcClient.IrcMessage)">
            <summary>
            Process RPL_AWAY responses from the server.
            </summary>
            <param name="message">The message received from the server.</param>
        </member>
        <member name="M:dotIRC.IrcClient.ProcessMessageReplyIsOn(dotIRC.IrcClient.IrcMessage)">
            <summary>
            Process RPL_ISON responses from the server.
            </summary>
            <param name="message">The message received from the server.</param>
        </member>
        <member name="M:dotIRC.IrcClient.ProcessMessageReplyUnAway(dotIRC.IrcClient.IrcMessage)">
            <summary>
            Process RPL_UNAWAY responses from the server.
            </summary>
            <param name="message">The message received from the server.</param>
        </member>
        <member name="M:dotIRC.IrcClient.ProcessMessageReplyNowAway(dotIRC.IrcClient.IrcMessage)">
            <summary>
            Process RPL_NOWAWAY responses from the server.
            </summary>
            <param name="message">The message received from the server.</param>
        </member>
        <member name="M:dotIRC.IrcClient.ProcessMessageReplyWhoIsUser(dotIRC.IrcClient.IrcMessage)">
            <summary>
            Process RPL_WHOISUSER responses from the server.
            </summary>
            <param name="message">The message received from the server.</param>
        </member>
        <member name="M:dotIRC.IrcClient.ProcessMessageReplyWhoIsServer(dotIRC.IrcClient.IrcMessage)">
            <summary>
            Process RPL_WHOISSERVER responses from the server.
            </summary>
            <param name="message">The message received from the server.</param>
        </member>
        <member name="M:dotIRC.IrcClient.ProcessMessageReplyWhoIsOperator(dotIRC.IrcClient.IrcMessage)">
            <summary>
            Process RPL_WHOISOPERATOR responses from the server.
            </summary>
            <param name="message">The message received from the server.</param>
        </member>
        <member name="M:dotIRC.IrcClient.ProcessMessageReplyWhoWasUser(dotIRC.IrcClient.IrcMessage)">
            <summary>
            Process RPL_WHOWASUSER responses from the server.
            </summary>
            <param name="message">The message received from the server.</param>
        </member>
        <member name="M:dotIRC.IrcClient.ProcessMessageReplyEndOfWho(dotIRC.IrcClient.IrcMessage)">
            <summary>
            Process RPL_ENDOFWHO responses from the server.
            </summary>
            <param name="message">The message received from the server.</param>
        </member>
        <member name="M:dotIRC.IrcClient.ProcessMessageReplyWhoIsIdle(dotIRC.IrcClient.IrcMessage)">
            <summary>
            Process RPL_WHOISIDLE responses from the server.
            </summary>
            <param name="message">The message received from the server.</param>
        </member>
        <member name="M:dotIRC.IrcClient.ProcessMessageReplyEndOfWhoIs(dotIRC.IrcClient.IrcMessage)">
            <summary>
            Process 318 responses from the server.
            </summary>
            <param name="message">The message received from the server.</param>
        </member>
        <member name="M:dotIRC.IrcClient.ProcessMessageReplyWhoIsChannels(dotIRC.IrcClient.IrcMessage)">
            <summary>
            Process RPL_WHOISCHANNELS responses from the server.
            </summary>
            <param name="message">The message received from the server.</param>
        </member>
        <member name="M:dotIRC.IrcClient.ProcessMessageReplyList(dotIRC.IrcClient.IrcMessage)">
            <summary>
            Process RPL_LIST responses from the server.
            </summary>
            <param name="message">The message received from the server.</param>
        </member>
        <member name="M:dotIRC.IrcClient.ProcessMessageReplyListEnd(dotIRC.IrcClient.IrcMessage)">
            <summary>
            Process RPL_LISTEND responses from the server.
            </summary>
            <param name="message">The message received from the server.</param>
        </member>
        <member name="M:dotIRC.IrcClient.ProcessMessageReplyNoTopic(dotIRC.IrcClient.IrcMessage)">
            <summary>
            Process RPL_NOTOPIC responses from the server.
            </summary>
            <param name="message">The message received from the server.</param>
        </member>
        <member name="M:dotIRC.IrcClient.ProcessMessageReplyTopic(dotIRC.IrcClient.IrcMessage)">
            <summary>
            Process RPL_TOPIC responses from the server.
            </summary>
            <param name="message">The message received from the server.</param>
        </member>
        <member name="M:dotIRC.IrcClient.ProcessMessageReplyInviting(dotIRC.IrcClient.IrcMessage)">
            <summary>
            Process RPL_INVITING responses from the server.
            </summary>
            <param name="message">The message received from the server.</param>
        </member>
        <member name="M:dotIRC.IrcClient.ProcessMessageReplyVersion(dotIRC.IrcClient.IrcMessage)">
            <summary>
            Process RPL_VERSION responses from the server.
            </summary>
            <param name="message">The message received from the server.</param>
        </member>
        <member name="M:dotIRC.IrcClient.ProcessMessageReplyWhoReply(dotIRC.IrcClient.IrcMessage)">
            <summary>
            Process RPL_WHOREPLY responses from the server.
            </summary>
            <param name="message">The message received from the server.</param>
        </member>
        <member name="M:dotIRC.IrcClient.ProcessMessageReplyNameReply(dotIRC.IrcClient.IrcMessage)">
            <summary>
            Process RPL_NAMEREPLY responses from the server.
            </summary>
            <param name="message">The message received from the server.</param>
        </member>
        <member name="M:dotIRC.IrcClient.ProcessMessageReplyLinks(dotIRC.IrcClient.IrcMessage)">
            <summary>
            Process RPL_LINKS responses from the server.
            </summary>
            <param name="message">The message received from the server.</param>
        </member>
        <member name="M:dotIRC.IrcClient.ProcessMessageReplyEndOfLinks(dotIRC.IrcClient.IrcMessage)">
            <summary>
            Process RPL_ENDOFLINKS responses from the server.
            </summary>
            <param name="message">The message received from the server.</param>
        </member>
        <member name="M:dotIRC.IrcClient.ProcessMessageReplyEndOfNames(dotIRC.IrcClient.IrcMessage)">
            <summary>
            Process RPL_ENDOFNAMES responses from the server.
            </summary>
            <param name="message">The message received from the server.</param>
        </member>
        <member name="M:dotIRC.IrcClient.ProcessMessageReplyEndOfWhoWas(dotIRC.IrcClient.IrcMessage)">
            <summary>
            Process RPL_ENDOFWHOWAS responses from the server.
            </summary>
            <param name="message">The message received from the server.</param>
        </member>
        <member name="M:dotIRC.IrcClient.ProcessMessageReplyMotd(dotIRC.IrcClient.IrcMessage)">
            <summary>
            Process RPL_MOTD responses from the server.
            </summary>
            <param name="message">The message received from the server.</param>
        </member>
        <member name="M:dotIRC.IrcClient.ProcessMessageReplyMotdStart(dotIRC.IrcClient.IrcMessage)">
            <summary>
            Process RPL_MOTDSTART responses from the server.
            </summary>
            <param name="message">The message received from the server.</param>
        </member>
        <member name="M:dotIRC.IrcClient.ProcessMessageReplyMotdEnd(dotIRC.IrcClient.IrcMessage)">
            <summary>
            Process RPL_ENDOFMOTD responses from the server.
            </summary>
            <param name="message">The message received from the server.</param>
        </member>
        <member name="M:dotIRC.IrcClient.ProcessMessageReplyYouAreService(dotIRC.IrcClient.IrcMessage)">
            <summary>
            Process RPL_YOURESERVICE responses from the server.
            </summary>
            <param name="message">The message received from the server.</param>
        </member>
        <member name="M:dotIRC.IrcClient.ProcessMessageReplyTime(dotIRC.IrcClient.IrcMessage)">
            <summary>
            Process RPL_TIME responses from the server.
            </summary>
            <param name="message">The message received from the server.</param>
        </member>
        <member name="M:dotIRC.IrcClient.ProcessMessageNumericError(dotIRC.IrcClient.IrcMessage)">
            <summary>
            Process numeric error (from 400 to 599) responses from the server.
            </summary>
            <param name="message">The message received from the server.</param>
        </member>
        <member name="M:dotIRC.IrcClient.SendMessagePassword(System.String)">
            <summary>
            Sends the password for registering the connection.
            This message must only be sent before the actual registration, which is done by
            <see cref="M:dotIRC.IrcClient.SendMessageUser(System.String,System.Int32,System.String)"/> (for normal users) or <see cref="M:dotIRC.IrcClient.SendMessageService(System.String,System.String,System.String)"/> (for services).
            </summary>
            <param name="password">The connection password.</param>
        </member>
        <member name="M:dotIRC.IrcClient.SendMessageNick(System.String)">
            <summary>
            Sends the nick name of the local user to the server. This command may be used either for intitially setting
            the nick name or changing it at any point.
            </summary>
            <param name="nickName">The nick name to set.</param>
        </member>
        <member name="M:dotIRC.IrcClient.SendMessageUser(System.String,System.Int32,System.String)">
            <summary>
            Sends a request to register the client as a user on the server.
            </summary>
            <param name="userName">The user name of the user.</param>
            <param name="userMode">The initial mode of the user.</param>
            <param name="realName">The real name of the user.</param>
        </member>
        <member name="M:dotIRC.IrcClient.SendMessageService(System.String,System.String,System.String)">
            <summary>
            Sends a request to register the client as a service on the server.
            </summary>
            <param name="nickName">The nick name of the service.</param>
            <param name="distribution">A wildcard expression for matching against server names, which determines where
            the service is visible.</param>
            <param name="description">A description of the service.</param>
        </member>
        <member name="M:dotIRC.IrcClient.SendMessageOper(System.String,System.String)">
            <summary>
            Sends a request for server operator privileges.
            </summary>
            <param name="userName">The user name with which to register.</param>
            <param name="password">The password with which to register.</param>
        </member>
        <member name="M:dotIRC.IrcClient.SendMessageUserMode(System.String,System.String)">
            <summary>
            Sends an update or request for the current modes of the specified user.
            </summary>
            <param name="nickName">The nick name of the user whose modes to update/request.</param>
            <param name="modes">The mode string that indicates the user modes to change.</param>
        </member>
        <member name="M:dotIRC.IrcClient.SendMessageQuit(System.String)">
            <summary>
            Sends a notification to the server indicating that the client is quitting the network.
            </summary>
            <param name="comment">The comment to send the server, or <see langword="null"/> for none.</param>
        </member>
        <member name="M:dotIRC.IrcClient.SendMessageSquit(System.String,System.String)">
            <summary>
            Sends a request to disconnect the specified server from the network.
            This command is only available to oeprators.
            </summary>
            <param name="targetServer">The name of the server to disconnected from the network.</param>
            <param name="comment">The comment to send the server.</param>
        </member>
        <member name="M:dotIRC.IrcClient.SendMessageLeaveAll">
            <summary>
            Sends a request to leave all channels in which the user is currently present.
            </summary>
        </member>
        <member name="M:dotIRC.IrcClient.SendMessageJoin(System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.String}})">
            <inheritdoc cref="M:dotIRC.IrcClient.SendMessageJoin(System.Collections.Generic.IEnumerable{System.String})"/>
            <param name="channels">A collection of 2-tuples of the names and keys of the channels to join.</param>
        </member>
        <member name="M:dotIRC.IrcClient.SendMessageJoin(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Sends a request to join the specified channels.
            </summary>
            <param name="channels">A collection of the names of the channels to join.</param>
        </member>
        <member name="M:dotIRC.IrcClient.SendMessagePart(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Sends a request to leave the specified channels.
            </summary>
            <param name="channels">A collection of the names of the channels to leave.</param>
            <param name="comment">The comment to send the server, or <see langword="null"/> for none.</param>
        </member>
        <member name="M:dotIRC.IrcClient.SendMessageChannelMode(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Sends an update for the modes of the specified channel.
            </summary>
            <param name="channel">The channel whose modes to update.</param>
            <param name="modes">The mode string that indicates the channel modes to change.</param>
            <param name="modeParameters">A collection of parameters to the specified <paramref name="modes"/>.</param>
        </member>
        <member name="M:dotIRC.IrcClient.SendMessageTopic(System.String,System.String)">
            <summary>
            Sends an update or request for the topic of the specified channel.
            </summary>
            <param name="channel">The name of the channel whose topic to change.</param>
            <param name="topic">The new topic to set, or <see langword="null"/> to request the current topic.</param>
        </member>
        <member name="M:dotIRC.IrcClient.SendMessageNames(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Sends a request to list all names visible to the client.
            </summary>
            <param name="channels">A collection of the names of channels for which to list users, or
            <see langword="null"/> for all channels.</param>
            <param name="targetServer">The name of the server to which to forward the message, or <see langword="null"/>
            for the current server.</param>
        </member>
        <member name="M:dotIRC.IrcClient.SendMessageList(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Sends a request to list channels and their topics.
            </summary>
            <param name="channels">A collection of the names of channels to list, or <see langword="null"/> for all
            channels.</param>
            <param name="targetServer">The name of the server to which to forward the message, or <see langword="null"/>
            for the current server.</param>
        </member>
        <member name="M:dotIRC.IrcClient.SendMessageInvite(System.String,System.String)">
            <summary>
            Sends a request to invite the specified user to the specified channel.
            </summary>
            <param name="channel">The name of the channel to which to invite the user.</param>
            <param name="nickName">The nick name of the user to invite.</param>
        </member>
        <member name="M:dotIRC.IrcClient.SendMessageKick(System.String,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <inheritdoc cref="M:dotIRC.IrcClient.SendMessageKick(System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.String}},System.String)"/>
            <param name="channel">The name of the channel from which to kick the users.</param>
            <param name="nickNames">A collection of the nick names of the users to kick from the channel.</param>
        </member>
        <member name="M:dotIRC.IrcClient.SendMessageKick(System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.String}},System.String)">
            <summary>
            Sends a request to kick the specifier users from the specified channel.
            </summary>
            <param name="channelsUsers">A collection of 2-tuples of channel names and the nick names of the users to
            kick from the channel.</param>
            <param name="comment">The comment to send the server, or <see langword="null"/> for none.</param>
        </member>
        <member name="M:dotIRC.IrcClient.SendMessagePrivateMessage(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Sends a private message to the specified targets.
            </summary>
            <param name="targets">A collection of the targets to which to send the message.</param>
            <param name="text">The text of the message to send.</param>
        </member>
        <member name="M:dotIRC.IrcClient.SendMessageNotice(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Sends a notice to the specified targets.
            </summary>
            <param name="targets">A collection of the targets to which to send the message.</param>
            <param name="text">The text of the message to send.</param>
        </member>
        <member name="M:dotIRC.IrcClient.SendMessageMotd(System.String)">
            <summary>
            Sends a request to receive the Message of the Day (MOTD) from the server.
            </summary>
            <param name="targetServer">The name of the server to which to forward the message, or <see langword="null"/> for
            the current server.</param>
        </member>
        <member name="M:dotIRC.IrcClient.SendMessageLUsers(System.String,System.String)">
            <summary>
            Sends a request to get statistics about the size of the IRC network.
            </summary>
            <param name="serverMask">A wildcard expression for matching against the names of servers, or
            <see langword="null"/> to match the entire network.</param>
            <param name="targetServer">The name of the server to which to forward the message, or <see langword="null"/>
            for the current server.</param>
        </member>
        <member name="M:dotIRC.IrcClient.SendMessageVersion(System.String)">
            <summary>
            Sends a request for the version of the server program.
            </summary>
            <param name="targetServer">The name of the server to which to forward the message, or <see langword="null"/>
            for the current server.</param>
        </member>
        <member name="M:dotIRC.IrcClient.SendMessageStats(System.String,System.String)">
            <summary>
            Sends a request to query statistics for the server.
            </summary>
            <param name="query">The query to send the server.</param>
            <param name="targetServer">The name of the server to which to forward the message, or <see langword="null"/>
            for the current server.</param>
        </member>
        <member name="M:dotIRC.IrcClient.SendMessageLinks(System.String,System.String)">
            <summary>
            Sends a request to list all other servers linked to the server.
            </summary>
            <param name="serverMask">A wildcard expression for matching the names of servers to list.</param>
            <param name="targetServer">The name of the server to which to forward the message, or <see langword="null"/>
            for the current server.</param>
        </member>
        <member name="M:dotIRC.IrcClient.SendMessageTime(System.String)">
            <summary>
            Sends a request to query the local time on the server.
            </summary>
            <param name="targetServer">The name of the server to which to forward the message, or <see langword="null"/>
            for the current server.</param>
        </member>
        <member name="M:dotIRC.IrcClient.SendMessageConnect(System.String,System.Int32,System.String)">
            <summary>
            Sends a request for the server to try to connect to another server.
            </summary>
            <param name="hostName">The host name of the other server to which the server should connect.</param>
            <param name="port">The port on the other server to which the server should connect.</param>
            <param name="targetServer">The name of the server to which to forward the message, or <see langword="null"/>
            for the current server.</param>
        </member>
        <member name="M:dotIRC.IrcClient.SendMessageTrace(System.String)">
            <summary>
            Sends a query to trace the route to the server.
            </summary>
            <param name="targetServer">The name of the server to which to forward the message, or <see langword="null"/>
            for the current server.</param>
        </member>
        <member name="M:dotIRC.IrcClient.SendMessageAdmin(System.String)">
            <summary>
            Sends a request for information about the administrator of the server.
            </summary>
            <param name="targetServer">The name of the server to which to forward the message, or <see langword="null"/>
            for the current server.</param>
        </member>
        <member name="M:dotIRC.IrcClient.SendMessageInfo(System.String)">
            <summary>
            Sends a request for general information about the server program.
            </summary>
            <param name="targetServer">The name of the server to which to forward the message, or <see langword="null"/>
            for the current server.</param>
        </member>
        <member name="M:dotIRC.IrcClient.SendMessageServlist(System.String,System.String)">
            <summary>
            Sends a request to list services currently connected to the netwrok/
            </summary>
            <param name="mask">A wildcard expression for matching against the names of services.</param>
            <param name="type">The type of services to list.</param>
        </member>
        <member name="M:dotIRC.IrcClient.SendMessageSquery(System.String,System.String)">
            <summary>
            Sends a query message to a service.
            </summary>
            <param name="serviceName">The name of the service.</param>
            <param name="text">The text of the message to send.</param>
        </member>
        <member name="M:dotIRC.IrcClient.SendMessageWho(System.String,System.Boolean)">
            <summary>
            Sends a request to perform a Who query on users.
            </summary>
            <param name="mask">A wildcard expression for matching against channel names; or if none can be found,
            host names, server names, real names, and nick names of users. If the value is <see langword="null"/>,
            all users are matched.</param>
            <param name="onlyOperators"><see langword="true"/> to match only server operators; 
            <see langword="false"/> to match all users.</param>
        </member>
        <member name="M:dotIRC.IrcClient.SendMessageWhoIs(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Sends a request to perform a WhoIs query on users.
            </summary>
            <param name="nickNameMasks">A collection of wildcard expressions for matching against the nick names of
            users.</param>
            <param name="targetServer">The name of the server to which to forward the message, or <see langword="null"/>
            for the current server.</param>
        </member>
        <member name="M:dotIRC.IrcClient.SendMessageWhoWas(System.Collections.Generic.IEnumerable{System.String},System.Int32,System.String)">
            <summary>
            Sends a request to perform a WhoWas query on users.
            </summary>
            <param name="nickNames">A collection of wildcard expressions for matching against the nick names of
            users.</param>
            <param name="entriesCount">The maximum number of (most recent) entries to return.</param>
            <param name="targetServer">The name of the server to which to forward the message, or <see langword="null"/>
            for the current server.</param>
        </member>
        <member name="M:dotIRC.IrcClient.SendMessageKill(System.String,System.String)">
            <summary>
            Sends a request to disconnect the specified user from the server.
            </summary>
            <param name="nickName">The nick name of the user to disconnect.</param>
            <param name="comment">The comment to send the server.</param>
        </member>
        <member name="M:dotIRC.IrcClient.SendMessagePing(System.String,System.String)">
            <summary>
            Sends a ping request to the server.
            </summary>
            <param name="server">The name of the server to which to send the request.</param>
            <param name="targetServer">The name of the server to which to forward the message, or <see langword="null"/>
            for the current server.</param>
        </member>
        <member name="M:dotIRC.IrcClient.SendMessagePong(System.String,System.String)">
            <summary>
            Sends a pong response (to a ping) to the server.
            </summary>
            <param name="server">The name of the server to which to send the response.</param>
            <param name="targetServer">The name of the server to which to forward the message, or <see langword="null"/>
            for the current server.</param>
        </member>
        <member name="M:dotIRC.IrcClient.SendMessageAway(System.String)">
            <summary>
            Sends an update to the server indicating that the local user is away.
            </summary>
            <param name="text">The text of the away message. The away message is sent to any user that tries to contact
            the local user while it is away.</param>
        </member>
        <member name="M:dotIRC.IrcClient.SendMessageRehash">
            <summary>
            Sends a request to the server telling it to reprocess its configuration settings.
            </summary>
        </member>
        <member name="M:dotIRC.IrcClient.SendMessageDie">
            <summary>
            Sends a request to the server telling it to shut down.
            </summary>
        </member>
        <member name="M:dotIRC.IrcClient.SendMessageRestart">
            <summary>
            Sends a message to the server telling it to restart.
            </summary>
        </member>
        <member name="M:dotIRC.IrcClient.SendMessageUsers(System.String)">
            <summary>
            Sends a request to return a list of information about all users currently registered on the server.
            </summary>
            <param name="targetServer">The name of the server to which to forward the message, or <see langword="null"/>
            for the current server.</param>
        </member>
        <member name="M:dotIRC.IrcClient.SendMessageWallops(System.String)">
            <summary>
            Sends a message to all connected users that have the 'w' mode set.
            </summary>
            <param name="text">The text of the message to send.</param>
        </member>
        <member name="M:dotIRC.IrcClient.SendMessageUserHost(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Sends a request to return the host names of the specified users.
            </summary>
            <param name="nickNames">A collection of the nick names of the users to query.</param>
        </member>
        <member name="M:dotIRC.IrcClient.SendMessageIsOn(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Sends a request to check whether the specified users are currently online.
            </summary>
            <param name="nickNames">A collection of the nick names of the users to query.</param>
        </member>
        <member name="M:dotIRC.IrcClient.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:dotIRC.IrcClient"/> class.
            </summary>
        </member>
        <member name="M:dotIRC.IrcClient.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:dotIRC.IrcClient"/> class.
            </summary>
        </member>
        <member name="M:dotIRC.IrcClient.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:dotIRC.IrcClient"/> object.
            </summary>
        </member>
        <member name="M:dotIRC.IrcClient.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by the <see cref="T:dotIRC.IrcClient"/>.
            </summary>
            <param name="disposing"><see langword="true"/> if the consumer is actively disposing the object;
            <see langword="false"/> if the garbage collector is finalizing the object.</param>
        </member>
        <member name="M:dotIRC.IrcClient.ListChannels(System.String[])">
            <inheritdoc cref="M:dotIRC.IrcClient.ListChannels(System.Collections.Generic.IEnumerable{System.String})"/>
        </member>
        <member name="M:dotIRC.IrcClient.ListChannels(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Requests a list of information about the specified (or all) channels on the network.
            </summary>
            <param name="channelNames">The names of the channels to list, or <see langword="null"/> to list all channels
            on the network.</param>
        </member>
        <member name="M:dotIRC.IrcClient.GetMessageOfTheDay(System.String)">
            <summary>
            Requests the Message of the Day (MOTD) from the specified server.
            </summary>
            <param name="targetServer">The name of the server from which to request the MOTD, or <see langword="null"/>
            for the current server.</param>
            <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed.</exception>
        </member>
        <member name="M:dotIRC.IrcClient.GetNetworkInfo(System.String,System.String)">
            <summary>
            Requests statistics about the connected IRC network.
            If <paramref name="serverMask"/> is specified, then the server only returns information about the part of
            the network formed by the servers whose names match the mask; otherwise, the information concerns the whole
            network
            </summary>
            <param name="serverMask">A wildcard expression for matching against server names, or <see langword="null"/>
            to match the entire network.</param>
            <param name="targetServer">The name of the server to which to forward the message, or <see langword="null"/>
            for the current server.</param>
            <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed.</exception>
        </member>
        <member name="M:dotIRC.IrcClient.GetServerVersion(System.String)">
            <summary>
            Requests the version of the specified server.
            </summary>
            <param name="targetServer">The name of the server whose version to request.</param>
            <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed.</exception>
        </member>
        <member name="M:dotIRC.IrcClient.GetServerStatistics(System.Nullable{System.Char},System.String)">
            <summary>
            Requests statistics about the specified server.
            </summary>
            <param name="query">The query character that indicates which server statistics to return.
            The set of valid query characters is dependent on the implementation of the particular IRC server.
            </param>
            <param name="targetServer">The name of the server whose statistics to request.</param>
            <remarks>
            The server may not accept the command if <paramref name="query"/> is unspecified.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed.</exception>
        </member>
        <member name="M:dotIRC.IrcClient.GetServerLinks(System.String,System.String)">
            <summary>
            Requests a list of all servers known by the target server.
            If <paramref name="serverMask"/> is specified, then the server only returns information about the part of
            the network formed by the servers whose names match the mask; otherwise, the information concerns the whole
            network.
            </summary>
            <param name="serverMask">A wildcard expression for matching against server names, or <see langword="null"/>
            to match the entire network.</param>
            <param name="targetServer">The name of the server to which to forward the request, or <see langword="null"/>
            for the current server.</param>
            <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed.</exception>
        </member>
        <member name="M:dotIRC.IrcClient.GetServerTime(System.String)">
            <summary>
            Requests the local time on the specified server.
            </summary>
            <param name="targetServer">The name of the server whose local time to request.</param>
            <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed.</exception>
        </member>
        <member name="M:dotIRC.IrcClient.Ping(System.String)">
            <summary>
            Sends a ping to the specified server.
            </summary>
            <param name="targetServer">The name of the server to ping.</param>
            <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed.</exception>
        </member>
        <member name="M:dotIRC.IrcClient.QueryWho(System.String,System.Boolean)">
            <summary>
            Sends a Who query to the server targeting the specified channel or user masks.
            </summary>
            <param name="mask">A wildcard expression for matching against channel names; or if none can be found,
            host names, server names, real names, and nick names of users. If the value is <see langword="null"/>,
            all users are matched.</param>
            <param name="onlyOperators"><see langword="true"/> to match only server operators; 
            <see langword="false"/> to match all users.</param>
            <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed.</exception>
        </member>
        <member name="M:dotIRC.IrcClient.QueryWhoIs(System.String[])">
            <inheritdoc cref="M:dotIRC.IrcClient.QueryWhoIs(System.Collections.Generic.IEnumerable{System.String})"/>
        </member>
        <member name="M:dotIRC.IrcClient.QueryWhoIs(System.Collections.Generic.IEnumerable{System.String})">
            <overloads>Sends a Who Is query to the server.</overloads>
            <summary>
            Sends a Who Is query to server targeting the specified nick name masks.
            </summary>
            <param name="nickNameMasks">A collection of wildcard expressions for matching against nick names of users.
            </param>
            <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="nickNameMasks"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:dotIRC.IrcClient.QueryWhoWas(System.String[])">
            <inheritdoc cref="M:dotIRC.IrcClient.QueryWhoWas(System.Collections.Generic.IEnumerable{System.String},System.Int32)"/>
        </member>
        <member name="M:dotIRC.IrcClient.QueryWhoWas(System.Collections.Generic.IEnumerable{System.String},System.Int32)">
            <summary>
            Sends a Who Was query to server targeting the specified nick names.
            </summary>
            <param name="nickNames">The nick names of the users to query.</param>
            <param name="entriesCount">The maximum number of entries to return from the query. A negative value
            specifies to return an unlimited number of entries.</param>
            <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="nickNames"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:dotIRC.IrcClient.Quit(System.Int32,System.String)">
            <inheritdoc cref="M:dotIRC.IrcClient.Quit(System.String)"/>
            <summary>
            Quits the server, giving the specified comment. Waits the specified duration of time before forcibly
            disconnecting.
            </summary>
            <param name="timeout">The number of milliseconds to wait before forcibly disconnecting.</param>
            <remarks>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed.</exception>
        </member>
        <member name="M:dotIRC.IrcClient.Quit(System.String)">
            <summary>
            Quits the server, giving the specified comment.
            </summary>
            <param name="comment">The comment to send to the server.</param>
            <remarks>
            Note that because this message is not sent immediately, calling <see cref="M:dotIRC.IrcClient.Disconnect"/> immediately after
            this will likely disconnect the client before it has a chance to quit the server properly.
            Quitting the server should automatically disconnect the client.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed.</exception>
        </member>
        <member name="M:dotIRC.IrcClient.SendRawMessage(System.String)">
            <summary>
            Sends the specified raw message to the server.
            </summary>
            <param name="message">The text (single line) of the message to send the server.</param>
            <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="message"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:dotIRC.IrcClient.HandleStatsEntryReceived(System.Int32,dotIRC.IrcClient.IrcMessage)">
            <summary>
            Handles the specified statistical entry for the server, received in response to a STATS message.
            </summary>
            <param name="type">The type of the statistical entry for the server.</param>
            <param name="message">The message that contains the statistical entry.</param>
        </member>
        <member name="M:dotIRC.IrcClient.HandleISupportParameter(System.String,System.String)">
            <summary>
            Handles the specified parameter value of an ISUPPORT message, received from the server upon registration.
            </summary>
            <param name="paramName">The name of the parameter.</param>
            <param name="paramValue">The value of the parameter, or <see langword="null"/> if it does not have a value.
            </param>
        </member>
        <member name="M:dotIRC.IrcClient.GetUserModeAndNickName(System.String)">
            <summary>
            Extracts the the mode and nick name of a user from the specified value.
            </summary>
            <param name="input">The input value, containing a nick name optionally prefixed by a mode character.</param>
            <returns>A 2-tuple of the nick name and user mode.</returns>
        </member>
        <member name="M:dotIRC.IrcClient.GetModeAndParameters(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets a collection of mode characters and mode parameters from the specified mode parameters.
            Combines multiple mode strings into a single mode string.
            </summary>
            <param name="messageParameters">A collection of message parameters, which consists of mode strings and mode
            parameters. A mode string is of the form `( "+" / "-" ) *( mode character )`, and specifies mode changes.
            A mode parameter is arbitrary text associated with a certain mode.</param>
            <returns>A 2-tuple of a single mode string and a collection of mode parameters.
            Each mode parameter corresponds to a single mode character, in the same order.</returns>
        </member>
        <member name="M:dotIRC.IrcClient.GetChannelsFromList(System.String)">
            <summary>
            Gets a list of channel objects from the specified comma-separated list of channel names.
            </summary>
            <param name="namesList">A value that contains a comma-separated list of names of channels.</param>
            <returns>A list of channel objects that corresponds to the given list of channel names.</returns>
        </member>
        <member name="M:dotIRC.IrcClient.GetUsersFromList(System.String)">
            <summary>
            Gets a list of user objects from the specified comma-separated list of nick names.
            </summary>
            <param name="nickNamesList">A value that contains a comma-separated list of nick names of users.</param>
            <returns>A list of user objects that corresponds to the given list of nick names.</returns>
        </member>
        <member name="M:dotIRC.IrcClient.IsChannelName(System.String)">
            <summary>
            Determines whether the specified name refers to a channel.
            </summary>
            <param name="name">The name to check.</param>
            <returns><see langword="true"/> if the specified name represents a channel; <see langword="false"/>,
            otherwise.</returns>
        </member>
        <member name="M:dotIRC.IrcClient.GetChannelType(System.Char)">
            <summary>
            Gets the type of the channel from the specified character.
            </summary>
            <param name="type">A character that represents the type of the channel.
            The character may be one of the following:
            <list type="bullet">
                <listheader>
                    <term>Character</term>
                    <description>Channel type</description>
                </listheader>
                <item>
                    <term>=</term>
                    <description>Public channel</description>
                </item>
                <item>
                    <term>*</term>
                    <description>Private channel</description>
                </item>
                <item>
                    <term>@</term>
                    <description>Secret channel</description>
                </item>
            </list></param>
            <returns>The channel type that corresponds to the specified character.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="type"/> does not correspond to any known channel type.
            </exception>
        </member>
        <member name="M:dotIRC.IrcClient.GetMessageTarget(System.String)">
            <summary>
            Gets the target of a message from the specified name.
            A message target may be an <see cref="T:dotIRC.IrcUser"/>, <see cref="T:dotIRC.IrcChannel"/>, or <see cref="T:dotIRC.IrcTargetMask"/>.
            </summary>
            <param name="targetName">The name of the target.</param>
            <returns>The target object that corresponds to the given name.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="targetName"/> does not represent a valid message target.
            </exception>
        </member>
        <member name="M:dotIRC.IrcClient.GetSourceFromPrefix(System.String)">
            <summary>
            Gets the source of a message from the specified prefix.
            A message source may be a <see cref="T:dotIRC.IrcUser"/> or <see cref="T:dotIRC.IrcServer"/>.
            </summary>
            <param name="prefix">The raw prefix of the message.</param>
            <returns>The message source that corresponds to the specified prefix. The object is an instance of
            <see cref="T:dotIRC.IrcUser"/> or <see cref="T:dotIRC.IrcServer"/>.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="prefix"/> does not represent a valid message source.
            </exception>
        </member>
        <member name="M:dotIRC.IrcClient.GetServerFromHostName(System.String)">
            <inheritdoc cref="M:dotIRC.IrcClient.GetServerFromHostName(System.String,System.Boolean@)"/>
        </member>
        <member name="M:dotIRC.IrcClient.GetServerFromHostName(System.String,System.Boolean@)">
            <summary>
            Gets the server with the specified host name, creating it if necessary.
            </summary>
            <param name="hostName">The host name of the server.</param>
            <param name="createdNew"><see langword="true"/> if the server object was created during the call;
            <see langword="false"/>, otherwise.</param>
            <returns>The server object that corresponds to the specified host name.</returns>
        </member>
        <member name="M:dotIRC.IrcClient.GetChannelFromName(System.String)">
            <inheritdoc cref="M:dotIRC.IrcClient.GetChannelFromName(System.String,System.Boolean@)"/>
        </member>
        <member name="M:dotIRC.IrcClient.GetChannelFromName(System.String,System.Boolean@)">
            <summary>
            Gets the channel with the specified name, creating it if necessary.
            </summary>
            <param name="channelName">The name of the channel.</param>
            <param name="createdNew"><see langword="true"/> if the channel object was created during the call;
            <see langword="false"/>, otherwise.</param>
            <returns>The channel object that corresponds to the specified name.</returns>
        </member>
        <member name="M:dotIRC.IrcClient.GetUserFromNickName(System.String,System.Boolean)">
            <inheritdoc cref="M:dotIRC.IrcClient.GetUserFromNickName(System.String,System.Boolean,System.Boolean@)"/>
        </member>
        <member name="M:dotIRC.IrcClient.GetUserFromNickName(System.String,System.Boolean,System.Boolean@)">
            <summary>
            Gets the user with the specified nick name, creating it if necessary.
            </summary>
            <param name="nickName">The nick name of the user.</param>
            <param name="isOnline"><see langword="true"/> if the user is currently online;
            <see langword="false"/>, if the user is currently offline.
            The <see cref="P:dotIRC.IrcUser.IsOnline"/> property of the user object is set to this value.</param>
            <param name="createdNew"><see langword="true"/> if the user object was created during the call;
            <see langword="false"/>, otherwise.</param>
            <returns>The user object that corresponds to the specified nick name.</returns>
        </member>
        <member name="M:dotIRC.IrcClient.GetUserFromUserName(System.String)">
            <inheritdoc cref="M:dotIRC.IrcClient.GetUserFromUserName(System.String,System.Boolean@)"/>
        </member>
        <member name="M:dotIRC.IrcClient.GetUserFromUserName(System.String,System.Boolean@)">
            <summary>
            Gets the user with the specified user name, creating it if necessary.
            </summary>
            <param name="userName">The user name of the user.</param>
            <param name="createdNew"><see langword="true"/> if the user object was created during the call;
            <see langword="false"/>, otherwise.</param>
            <returns>The user object that corresponds to the specified user name.</returns>
        </member>
        <member name="M:dotIRC.IrcClient.WriteMessage(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc cref="M:dotIRC.IrcClient.WriteMessage(System.String,System.String,System.String[])"/>
            <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed.</exception>
        </member>
        <member name="M:dotIRC.IrcClient.WriteMessage(System.String,System.String,System.String[])">
            <inheritdoc cref="M:dotIRC.IrcClient.WriteMessage(dotIRC.IrcClient.IrcMessage)"/>
            <param name="prefix">The message prefix that represents the source of the message.</param>
            <param name="command">The name of the command.</param>
            <param name="parameters">A collection of the parameters to the command.</param>
            <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed.</exception>
        </member>
        <member name="M:dotIRC.IrcClient.WriteMessage(dotIRC.IrcClient.IrcMessage)">
            <inheritdoc cref="M:dotIRC.IrcClient.WriteMessage(System.String,System.Object)"/>
            <summary>
            Writes the specified message (prefix, command, and parameters) to the network stream.
            </summary>
            <param name="message">The message to write.</param>
            <exception cref="T:System.ArgumentException"><paramref name="message"/> contains more than 15 many parameters.
            </exception>
            <exception cref="T:System.ArgumentException">The value of <see cref="F:dotIRC.IrcClient.IrcMessage.Command"/> of
            <paramref name="message"/> is invalid.</exception>
            <exception cref="T:System.ArgumentException">The value of one of the items of <see cref="F:dotIRC.IrcClient.IrcMessage.Parameters"/> of
            <paramref name="message"/> is invalid.</exception>
            <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed.</exception>
        </member>
        <member name="M:dotIRC.IrcClient.Connect(System.Uri,dotIRC.IrcRegistrationInfo)">
            <inheritdoc cref="M:dotIRC.IrcClient.Connect(System.String,System.Int32,System.Boolean,dotIRC.IrcRegistrationInfo)"/>
            <summary>
            Connects to a server using the specified URL and user information.
            </summary>
        </member>
        <member name="M:dotIRC.IrcClient.Connect(System.String,System.Boolean,dotIRC.IrcRegistrationInfo)">
            <inheritdoc cref="M:dotIRC.IrcClient.Connect(System.String,System.Int32,System.Boolean,dotIRC.IrcRegistrationInfo)"/>
        </member>
        <member name="M:dotIRC.IrcClient.Connect(System.String,System.Int32,System.Boolean,dotIRC.IrcRegistrationInfo)">
            <inheritdoc cref="M:dotIRC.IrcClient.Connect(System.Net.EndPoint,System.Boolean,dotIRC.IrcRegistrationInfo)"/>
            <param name="hostName">The name of the remote host.</param>
            <param name="port">The port number of the remote host.</param>
        </member>
        <member name="M:dotIRC.IrcClient.Connect(System.Net.IPAddress,System.Boolean,dotIRC.IrcRegistrationInfo)">
            <inheritdoc cref="M:dotIRC.IrcClient.Connect(System.Net.IPAddress,System.Int32,System.Boolean,dotIRC.IrcRegistrationInfo)"/>
        </member>
        <member name="M:dotIRC.IrcClient.Connect(System.Net.IPAddress,System.Int32,System.Boolean,dotIRC.IrcRegistrationInfo)">
            <inheritdoc cref="M:dotIRC.IrcClient.Connect(System.Net.EndPoint,System.Boolean,dotIRC.IrcRegistrationInfo)"/>
            <param name="address">An IP addresses that designates the remote host.</param>
            <param name="port">The port number of the remote host.</param>
        </member>
        <member name="M:dotIRC.IrcClient.Connect(System.Net.EndPoint,System.Boolean,dotIRC.IrcRegistrationInfo)">
            <summary>
            Connects asynchronously to the specified server.
            </summary>
            <param name="remoteEndPoint">The network endpoint (IP address and port) of the server to which to connect.
            </param>
            <param name="useSsl"><see langword="true"/> to connect to the server via SSL; <see langword="false"/>,
            otherwise</param>
            <param name="registrationInfo">The information used for registering the client.
            The type of the object may be either <see cref="T:dotIRC.IrcUserRegistrationInfo"/> or
            <see cref="T:dotIRC.IrcServiceRegistrationInfo"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="registrationInfo"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException"><paramref name="registrationInfo"/> does not specify valid registration
            information.</exception>
            <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed.</exception>
        </member>
        <member name="M:dotIRC.IrcClient.Disconnect">
            <summary>
            Disconnects asynchronously from the server.
            </summary>
            <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed.</exception>
            <remarks>
            This method closes the client connection immediately and forcibly, and does not send a quit message to the
            server. To disconnect from the IRC server gracefully, call <see cref="M:dotIRC.IrcClient.Quit(System.String)"/> and wait for the
            connection to be closed.
            </remarks>
        </member>
        <member name="M:dotIRC.IrcClient.OnConnected(System.EventArgs)">
            <summary>
            Raises the <see cref="E:dotIRC.IrcClient.Connected"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:dotIRC.IrcClient.OnConnectFailed(dotIRC.IrcErrorEventArgs)">
            <summary>
            Raises the <see cref="E:dotIRC.IrcClient.ConnectFailed"/> event.
            </summary>
            <param name="e">The <see cref="T:dotIRC.IrcErrorEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:dotIRC.IrcClient.OnDisconnected(System.EventArgs)">
            <summary>
            Raises the <see cref="E:dotIRC.IrcClient.Disconnected"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:dotIRC.IrcClient.OnError(dotIRC.IrcErrorEventArgs)">
            <summary>
            Raises the <see cref="E:dotIRC.IrcClient.Error"/> event.
            </summary>
            <param name="e">The <see cref="T:dotIRC.IrcErrorEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:dotIRC.IrcClient.OnValidateSslCertificate(dotIRC.IrcValidateSslCertificateEventArgs)">
            <summary>
            Raises the <see cref="E:dotIRC.IrcClient.ValidateSslCertificate"/> event.
            </summary>
            <param name="e">The <see cref="T:dotIRC.IrcValidateSslCertificateEventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:dotIRC.IrcClient.OnRawMessageSent(dotIRC.IrcRawMessageEventArgs)">
            <summary>
            Raises the <see cref="E:dotIRC.IrcClient.RawMessageSent"/> event.
            </summary>
            <param name="e">The <see cref="T:dotIRC.IrcRawMessageEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:dotIRC.IrcClient.OnRawMessageReceived(dotIRC.IrcRawMessageEventArgs)">
            <summary>
            Raises the <see cref="E:dotIRC.IrcClient.RawMessageReceived"/> event.
            </summary>
            <param name="e">The <see cref="T:dotIRC.IrcRawMessageEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:dotIRC.IrcClient.OnProtocolError(dotIRC.IrcProtocolErrorEventArgs)">
            <summary>
            Raises the <see cref="E:dotIRC.IrcClient.ProtocolError"/> event.
            </summary>
            <param name="e">The <see cref="T:dotIRC.IrcProtocolErrorEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:dotIRC.IrcClient.OnErrorMessageReceived(dotIRC.IrcErrorMessageEventArgs)">
            <summary>
            Raises the <see cref="E:dotIRC.IrcClient.ErrorMessageReceived"/> event.
            </summary>
            <param name="e">The <see cref="T:dotIRC.IrcErrorMessageEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:dotIRC.IrcClient.OnClientInfoReceived(System.EventArgs)">
            <summary>
            Raises the <see cref="E:dotIRC.IrcClient.ClientInfoReceived"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:dotIRC.IrcClient.OnRegistered(System.EventArgs)">
            <summary>
            Raises the <see cref="E:dotIRC.IrcClient.Registered"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:dotIRC.IrcClient.OnServerBounce(dotIRC.IrcServerInfoEventArgs)">
            <summary>
            Raises the <see cref="E:dotIRC.IrcClient.ServerBounce"/> event.
            </summary>
            <param name="e">The <see cref="T:dotIRC.IrcServerInfoEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:dotIRC.IrcClient.OnServerSupportedFeaturesReceived(System.EventArgs)">
            <summary>
            Raises the <see cref="E:dotIRC.IrcClient.ServerSupportedFeaturesReceived"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:dotIRC.IrcClient.OnPingReceived(dotIRC.IrcPingOrPongReceivedEventArgs)">
            <summary>
            Raises the <see cref="E:dotIRC.IrcClient.PingReceived"/> event.
            </summary>
            <param name="e">The <see cref="T:dotIRC.IrcPingOrPongReceivedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:dotIRC.IrcClient.OnPongReceived(dotIRC.IrcPingOrPongReceivedEventArgs)">
            <summary>
            Raises the <see cref="E:dotIRC.IrcClient.PongReceived"/> event.
            </summary>
            <param name="e">The <see cref="T:dotIRC.IrcPingOrPongReceivedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:dotIRC.IrcClient.OnMotdReceived(System.EventArgs)">
            <summary>
            Raises the <see cref="E:dotIRC.IrcClient.MotdReceived"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:dotIRC.IrcClient.OnNetworkInformationReceived(System.EventArgs)">
            <summary>
            Raises the <see cref="E:dotIRC.IrcClient.NetworkInformationReceived"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:dotIRC.IrcClient.OnServerVersionInfoReceived(dotIRC.IrcServerVersionInfoEventArgs)">
            <summary>
            Raises the <see cref="E:dotIRC.IrcClient.ServerVersionInfoReceived"/> event.
            </summary>
            <param name="e">The <see cref="T:dotIRC.IrcServerVersionInfoEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:dotIRC.IrcClient.OnServerTimeReceived(dotIRC.IrcServerTimeEventArgs)">
            <summary>
            Raises the <see cref="E:dotIRC.IrcClient.ServerTimeReceived"/> event.
            </summary>
            <param name="e">The <see cref="T:dotIRC.IrcServerTimeEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:dotIRC.IrcClient.OnServerLinksListReceived(dotIRC.IrcServerLinksListReceivedEventArgs)">
            <summary>
            Raises the <see cref="E:dotIRC.IrcClient.ServerLinksListReceived"/> event.
            </summary>
            <param name="e">The <see cref="T:dotIRC.IrcServerLinksListReceivedEventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:dotIRC.IrcClient.OnServerStatsReceived(dotIRC.IrcServerStatsReceivedEventArgs)">
            <summary>
            Raises the <see cref="E:dotIRC.IrcClient.ServerStatsReceived"/> event.
            </summary>
            <param name="e">The <see cref="T:dotIRC.IrcServerStatsReceivedEventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:dotIRC.IrcClient.OnWhoReplyReceived(dotIRC.IrcNameEventArgs)">
            <summary>
            Raises the <see cref="E:dotIRC.IrcClient.WhoReplyReceived"/> event.
            </summary>
            <param name="e">The <see cref="T:dotIRC.IrcNameEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:dotIRC.IrcClient.OnWhoIsReplyReceived(dotIRC.IrcUserEventArgs)">
            <summary>
            Raises the <see cref="E:dotIRC.IrcClient.WhoIsReplyReceived"/> event.
            </summary>
            <param name="e">The <see cref="T:dotIRC.IrcUserEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:dotIRC.IrcClient.OnWhoWasReplyReceived(dotIRC.IrcUserEventArgs)">
            <summary>
            Raises the <see cref="E:dotIRC.IrcClient.WhoWasReplyReceived"/> event.
            </summary>
            <param name="e">The <see cref="T:dotIRC.IrcUserEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:dotIRC.IrcClient.OnChannelListReceived(dotIRC.IrcChannelListReceivedEventArgs)">
            <summary>
            Raises the <see cref="E:dotIRC.IrcClient.ChannelListReceived"/> event.
            </summary>
            <param name="e">The <see cref="T:dotIRC.IrcChannelListReceivedEventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:dotIRC.IrcClient.ToString">
            <summary>
            Returns a string representation of this instance.
            </summary>
            <returns>A string that represents this instance.</returns>
        </member>
        <member name="P:dotIRC.IrcClient.IsRegistered">
            <summary>
            Gets whether the client connection has been registered with the server.
            </summary>
            <value><see langword="true"/> if the connection has been registered; <see langword="false"/>, otherwise.
            </value>
        </member>
        <member name="P:dotIRC.IrcClient.LocalUser">
            <summary>
            Gets the local user. The local user is the user managed by this client connection.
            </summary>
            <value>The local user.</value>
        </member>
        <member name="P:dotIRC.IrcClient.WelcomeMessage">
            <summary>
            Gets the 'Welcome' message sent by the server.
            This value is set after successful registration of the connection.
            </summary>
            <value>The 'Welcome' message received from the server..</value>
        </member>
        <member name="P:dotIRC.IrcClient.YourHostMessage">
            <summary>
            Gets the 'Your Host' message sent by the server.
            This value is set after successful registration of the connection.
            </summary>
            <value>The 'Your Host' message received from the server.</value>
        </member>
        <member name="P:dotIRC.IrcClient.ServerCreatedMessage">
            <summary>
            Gets the 'Created' message sent by the server.
            This value is set after successful registration of the connection.
            </summary>
            <value>The 'Created' message received from the server.</value>
        </member>
        <member name="P:dotIRC.IrcClient.ServerName">
            <summary>
            Gets the host name of the server.
            This value is set after successful registration of the connection.
            </summary>
            <value>The host name given received from the server.</value>
        </member>
        <member name="P:dotIRC.IrcClient.ServerVersion">
            <summary>
            Gets the version of the server.
            This value is set after successful registration of the connection.
            </summary>
            <value>The version given received from the server.</value>
        </member>
        <member name="P:dotIRC.IrcClient.ServerAvailableUserModes">
            <summary>
            Gets a collection of the user modes available on the server.
            This value is set after successful registration of the connection.
            </summary>
            <value>A list of user modes available on the server.</value>
        </member>
        <member name="P:dotIRC.IrcClient.ServerAvailableChannelModes">
            <summary>
            Gets a collection of the channel modes available on the server.
            This value is set after successful registration of the connection.
            </summary>
            <value>A list of channel modes available on the server.</value>
        </member>
        <member name="P:dotIRC.IrcClient.ServerSupportedFeatures">
            <summary>
            Gets a dictionary of the features supported by the server, keyed by feature name, as returned by the
            ISUPPORT message.
            This value is set after successful registration of the connection.
            </summary>
            <value>A dictionary of features supported by the server.</value>
        </member>
        <member name="P:dotIRC.IrcClient.ChannelUserModes">
            <summary>
            Gets a collection of channel modes that apply to users in a channel.
            </summary>
            <value>A collection of channel modes that apply to users.</value>
        </member>
        <member name="P:dotIRC.IrcClient.MessageOfTheDay">
            <summary>
            Gets the Message of the Day (MOTD) sent by the server.
            This value is set after successful registration of the connection.
            </summary>
            <value>The Message of the Day sent by the server.</value>
        </member>
        <member name="P:dotIRC.IrcClient.NetworkInformation">
            <summary>
            Gets information about the IRC network that is given by the server.
            This value is set after successful registration of the connection.
            </summary>
            <value>The Message of the Day sent by the server.</value>
        </member>
        <member name="P:dotIRC.IrcClient.Channels">
            <summary>
            Gets a collection of all channels known to the client.
            </summary>
            <value>A collection of known channels.</value>
        </member>
        <member name="P:dotIRC.IrcClient.Users">
            <summary>
            Gets a collection of all users known to the client, including the local user.
            </summary>
            <value>A collection of known users.</value>
        </member>
        <member name="P:dotIRC.IrcClient.FloodPreventer">
            <summary>
            Gets or sets an object that limits the rate of outgoing messages in order to prevent flooding the server.
            The value is <see langword="null"/> by default, which indicates that no flood prevention should be
            performed.
            </summary>
            <value>A flood preventer object.</value>
        </member>
        <member name="P:dotIRC.IrcClient.TextEncoding">
            <summary>
            Gets or sets the text encoding to use for reading from and writing to the network data stream.
            </summary>
            <value>The text encoding of the network stream.</value>
        </member>
        <member name="P:dotIRC.IrcClient.IsConnected">
            <summary>
            Gets whether the client is currently connected to a server.
            </summary>
            <value><see langword="true"/> if the client is connected; <see langword="false"/>, otherwise.</value>
        </member>
        <member name="P:dotIRC.IrcClient.IsDisposed">
            <summary>
            Gets whether the <see cref="T:dotIRC.IrcClient"/> object has been disposed.
            </summary>
            <value><see langword="true"/> if the <see cref="T:dotIRC.IrcClient"/> object has been disposed;
            <see langword="false"/>, otherwise.</value>
        </member>
        <member name="E:dotIRC.IrcClient.Connected">
            <summary>
            Occurs when the client has connected to the server.
            </summary>
            <remarks>
            Note that the <see cref="P:dotIRC.IrcClient.LocalUser"/> object is not yet set when this event occurs, but is only accessible
            when the <see cref="E:dotIRC.IrcClient.Registered"/> event is raised.
            </remarks>
        </member>
        <member name="E:dotIRC.IrcClient.ConnectFailed">
            <summary>
            Occurs when the client has failed to connect to the server.
            </summary>
        </member>
        <member name="E:dotIRC.IrcClient.Disconnected">
            <summary>
            Occurs when the client has disconnected from the server.
            </summary>
        </member>
        <member name="E:dotIRC.IrcClient.Error">
            <summary>
            Occurs when the client encounters an error during execution, while connected.
            </summary>
        </member>
        <member name="E:dotIRC.IrcClient.ValidateSslCertificate">
            <summary>
            Occurs when the SSL certificate received from the server should be validated.
            The certificate is automatically validated if this event is not handled.
            </summary>
        </member>
        <member name="E:dotIRC.IrcClient.RawMessageSent">
            <summary>
            Occurs when a raw message has been sent to the server.
            </summary>
        </member>
        <member name="E:dotIRC.IrcClient.RawMessageReceived">
            <summary>
            Occurs when a raw message has been received from the server.
            </summary>
        </member>
        <member name="E:dotIRC.IrcClient.ProtocolError">
            <summary>
            Occurs when a protocol (numeric) error is received from the server.
            </summary>
        </member>
        <member name="E:dotIRC.IrcClient.ErrorMessageReceived">
            <summary>
            Occurs when an error message (ERROR command) is received from the server.
            </summary>
        </member>
        <member name="E:dotIRC.IrcClient.Registered">
            <summary>
            Occurs when the connection has been registered.
            </summary>
            <remarks>
            The <see cref="P:dotIRC.IrcClient.LocalUser"/> object is set when this event occurs.
            </remarks>
        </member>
        <member name="E:dotIRC.IrcClient.ClientInfoReceived">
            <summary>
            Occurs when the client information has been received from the server, following registration.
            </summary>
            <remarks>
            Client information is accessible via <see cref="P:dotIRC.IrcClient.WelcomeMessage"/>, <see cref="P:dotIRC.IrcClient.YourHostMessage"/>,
            <see cref="P:dotIRC.IrcClient.ServerCreatedMessage"/>, <see cref="P:dotIRC.IrcClient.ServerName"/>, <see cref="P:dotIRC.IrcClient.ServerVersion"/>,
            <see cref="P:dotIRC.IrcClient.ServerAvailableUserModes"/>, and <see cref="P:dotIRC.IrcClient.ServerAvailableChannelModes"/>.
            </remarks>
        </member>
        <member name="E:dotIRC.IrcClient.ServerBounce">
            <summary>
            Occurs when a bounce message is received from the server, telling the client to connect to a new server.
            </summary>
        </member>
        <member name="E:dotIRC.IrcClient.ServerSupportedFeaturesReceived">
            <summary>
            Occurs when a list of features supported by the server (ISUPPORT) has been received.
            This event may be raised more than once after registration, depending on the size of the list received.
            </summary>
        </member>
        <member name="E:dotIRC.IrcClient.PingReceived">
            <summary>
            Occurs when a ping query is received from the server.
            The client automatically replies to pings from the server; this event is only a notification.
            </summary>
        </member>
        <member name="E:dotIRC.IrcClient.PongReceived">
            <summary>
            Occurs when a pong reply is received from the server.
            </summary>
        </member>
        <member name="E:dotIRC.IrcClient.MotdReceived">
            <summary>
            Occurs when the Message of the Day (MOTD) has been received from the server.
            </summary>
        </member>
        <member name="E:dotIRC.IrcClient.NetworkInformationReceived">
            <summary>
            Occurs when information about the IRC network has been received from the server.
            </summary>
        </member>
        <member name="E:dotIRC.IrcClient.ServerVersionInfoReceived">
            <summary>
            Occurs when information about a specific server on the IRC network has been received from the server.
            </summary>
        </member>
        <member name="E:dotIRC.IrcClient.ServerTimeReceived">
            <summary>
            Occurs when the local date/time for a specific server has been received from the server.
            </summary>
        </member>
        <member name="E:dotIRC.IrcClient.ServerLinksListReceived">
            <summary>
            Occurs when a list of server links has been received from the server.
            </summary>
        </member>
        <member name="E:dotIRC.IrcClient.ServerStatsReceived">
            <summary>
            Occurs when server statistics have been received from the server.
            </summary>
        </member>
        <member name="E:dotIRC.IrcClient.WhoReplyReceived">
            <summary>
            Occurs when a reply to a Who query has been received from the server.
            </summary>
        </member>
        <member name="E:dotIRC.IrcClient.WhoIsReplyReceived">
            <summary>
            Occurs when a reply to a Who Is query has been received from the server.
            </summary>
        </member>
        <member name="E:dotIRC.IrcClient.WhoWasReplyReceived">
            <summary>
            Occurs when a reply to a Who Was query has been received from the server.
            </summary>
        </member>
        <member name="E:dotIRC.IrcClient.ChannelListReceived">
            <summary>
            Occurs when a list of channels has been received from the server in response to a query.
            </summary>
        </member>
        <member name="T:dotIRC.IrcClient.MessageProcessor">
            <summary>
            Represents a method that processes <see cref="T:dotIRC.IrcClient.IrcMessage"/> objects.
            </summary>
            <param name="message">The message to be processed.</param>
        </member>
        <member name="T:dotIRC.IrcClient.IrcMessage">
            <summary>
            Represents a raw IRC message that is sent/received by <see cref="T:dotIRC.IrcClient"/>.
            A message contains a prefix (representing the source), a command name (a word or three-digit number),
            and any number of parameters (up to a maximum of 15).
            </summary>
            <seealso cref="T:dotIRC.IrcClient"/>
        </member>
        <member name="F:dotIRC.IrcClient.IrcMessage.Source">
            <summary>
            The source of the message, which is the object represented by the value of <see cref="F:dotIRC.IrcClient.IrcMessage.Prefix"/>.
            </summary>
        </member>
        <member name="F:dotIRC.IrcClient.IrcMessage.Prefix">
            <summary>
            The message prefix.
            </summary>
        </member>
        <member name="F:dotIRC.IrcClient.IrcMessage.Command">
            <summary>
            The name of the command.
            </summary>
        </member>
        <member name="F:dotIRC.IrcClient.IrcMessage.Parameters">
            <summary>
            A list of the parameters to the message.
            </summary>
        </member>
        <member name="M:dotIRC.IrcClient.IrcMessage.#ctor(dotIRC.IrcClient,System.String,System.String,System.Collections.Generic.IList{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:dotIRC.IrcClient.IrcMessage"/> structure.
            </summary>
            <param name="client">A client object that has sent/will receive the message.</param>
            <param name="prefix">The message prefix that represents the source of the message.</param>
            <param name="command">The command name; either an alphabetic word or 3-digit number.</param>
            <param name="parameters">A list of the parameters to the message. Can contain a maximum of 15 items.
            </param>
        </member>
        <member name="M:dotIRC.IrcClient.IrcMessage.ToString">
            <summary>
            Returns a string representation of this instance.
            </summary>
            <returns>A string that represents this instance.</returns>
        </member>
        <member name="T:dotIRC.IrcTargetMask">
            <summary>
            Represents a mask of an IRC server name or host name, used for specifying the targets of a message.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:dotIRC.IrcTargetMask.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:dotIRC.IrcTargetMask"/> class with the specified target mask
            identifier.
            </summary>
            <param name="targetMask">A wildcard expression for matching against server names or host names.
            If the first character is '$', the mask is a server mask; if the first character is '#', the mask is a host
            mask.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="targetMask"/> is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentException">The length of <paramref name="targetMask"/> is too short.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="targetMask"/> does not represent a known mask type.
            </exception>
        </member>
        <member name="M:dotIRC.IrcTargetMask.#ctor(dotIRC.IrcTargetMaskType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:dotIRC.IrcTargetMask"/> class with the specified type and mask.
            </summary>
            <param name="type">The type.</param>
            <param name="mask">The mask.</param>
        </member>
        <member name="M:dotIRC.IrcTargetMask.ToString">
            <summary>
            Returns a string representation of this instance.
            </summary>
            <returns>A string that represents this instance.</returns>
        </member>
        <member name="P:dotIRC.IrcTargetMask.Type">
            <summary>
            Gets the type of the target mask; either a server mask or channel mask.
            </summary>
            <value>The type of the mask.</value>
        </member>
        <member name="P:dotIRC.IrcTargetMask.Mask">
            <summary>
            Gets a wildcard expression for matching against target names.
            The <see cref="P:dotIRC.IrcTargetMask.Type"/> property determines the type of the mask.
            </summary>
            <value>The target mask.</value>
        </member>
        <member name="T:dotIRC.IrcTargetMaskType">
            <summary>
            Defines the types of a target mask.
            </summary>
        </member>
        <member name="F:dotIRC.IrcTargetMaskType.ServerMask">
            <summary>
            A mask of a server name.
            </summary>
        </member>
        <member name="F:dotIRC.IrcTargetMaskType.HostMask">
            <summary>
            A mask of a host name.
            </summary>
        </member>
        <member name="T:dotIRC.IrcLocalUser">
            <summary>
            Represents the local user of a specific <see cref="T:dotIRC.IrcClient"/>.
            The local user is the user as which the client has connected and registered, and may be either a normal user or
            service.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="T:dotIRC.IrcUser">
            <summary>
            Represents an IRC user that exists on a specific <see cref="T:dotIRC.IrcClient"/>.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:dotIRC.IrcUser.WhoIs">
            <summary>
            Sends a Who Is query to server for the user.
            </summary>
        </member>
        <member name="M:dotIRC.IrcUser.WhoWas(System.Int32)">
            <summary>
            Sends a Who Was query to server for the user.
            </summary>
            <param name="entriesCount">The maximum number of entries that the server should return. A negative number
            specifies an unlimited number of entries.</param>
        </member>
        <member name="M:dotIRC.IrcUser.GetChannelUsers">
            <summary>
            Gets a collection of all channel users that correspond to the user.
            Each <see cref="T:dotIRC.IrcChannelUser"/> represents a channel of which the user is currently a member.
            </summary>
            <returns>A collection of all <see cref="T:dotIRC.IrcChannelUser"/> object that correspond to the <see cref="T:dotIRC.IrcUser"/>.
            </returns>
        </member>
        <member name="M:dotIRC.IrcUser.OnNickNameChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:dotIRC.IrcUser.NickNameChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:dotIRC.IrcUser.OnIsAwayChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:dotIRC.IrcUser.IsAwayChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:dotIRC.IrcUser.OnInviteReceived(dotIRC.IrcChannelInvitationEventArgs)">
            <summary>
            Raises the <see cref="E:dotIRC.IrcUser.InviteReceived"/> event.
            </summary>
            <param name="e">The <see cref="T:dotIRC.IrcChannelEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:dotIRC.IrcUser.OnQuit(dotIRC.IrcCommentEventArgs)">
            <summary>
            Raises the <see cref="E:dotIRC.IrcUser.Quit"/> event.
            </summary>
            <param name="e">The <see cref="T:dotIRC.IrcCommentEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:dotIRC.IrcUser.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:PropertyChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:dotIRC.IrcUser.ToString">
            <summary>
            Returns a string representation of this instance.
            </summary>
            <returns>A string that represents this instance.</returns>
        </member>
        <member name="P:dotIRC.IrcUser.IsOnline">
            <summary>
            Gets whether the user is currently connected to the IRC network. This value may not be always be
            up-to-date.
            </summary>
            <value><see langword="true"/> if the user is currently online; <see langword="false"/> if the user is
            currently offline.</value>
        </member>
        <member name="P:dotIRC.IrcUser.NickName">
            <summary>
            Gets the current nick name of the user.
            </summary>
            <value>The nick name of the user.</value>
        </member>
        <member name="P:dotIRC.IrcUser.UserName">
            <summary>
            Gets the current user name of the user. This value never changes until the user reconnects.
            </summary>
            <value>The user name of the user.</value>
        </member>
        <member name="P:dotIRC.IrcUser.RealName">
            <summary>
            Gets the real name of the user. This value never changes until the user reconnects.
            </summary>
            <value>The real name of the user.</value>
        </member>
        <member name="P:dotIRC.IrcUser.HostName">
            <summary>
            Gets the host name of the user.
            </summary>
            <value>The host name of the user.</value>
        </member>
        <member name="P:dotIRC.IrcUser.ServerName">
            <summary>
            Gets the name of the server to which the user is connected.
            </summary>
            <value>The name of the server to which the user is connected.</value>
        </member>
        <member name="P:dotIRC.IrcUser.ServerInfo">
            <summary>
            Gets arbitrary information about the server to which the user is connected.
            </summary>
            <value>Arbitrary information about the server.</value>
        </member>
        <member name="P:dotIRC.IrcUser.IsOperator">
            <summary>
            Gets whether the user is a server operator.
            </summary>
            <value><see langword="true"/> if the user is a server operator; <see langword="false"/>, otherwise.</value>
        </member>
        <member name="P:dotIRC.IrcUser.IsAway">
            <summary>
            Gets whether the user has been been seen as away. This value is always up-to-date for the local user;
            though it is only updated for remote users when a private message is sent to them or a Who Is response
            is received for the user.
            </summary>
            <value><see langword="true"/> if the user is currently away; <see langword="false"/>, if the user is
            currently here.</value>
        </member>
        <member name="P:dotIRC.IrcUser.AwayMessage">
            <summary>
            Gets the current away message received when the user was seen as away.
            </summary>
            <value>The current away message of the user.</value>
        </member>
        <member name="P:dotIRC.IrcUser.IdleDuration">
            <summary>
            Gets the duration for which the user has been idle. This is set when a Who Is response is received.
            </summary>
            <value>The duration for which the user has been idle.</value>
        </member>
        <member name="P:dotIRC.IrcUser.HopCount">
            <summary>
            Gets the hop count of the user, which is the number of servers between the user and the server on which the
            client is connected, within the network.
            </summary>
            <value>The hop count of the user.</value>
        </member>
        <member name="P:dotIRC.IrcUser.Client">
            <summary>
            Gets the client on which the user exists.
            </summary>
            <value>The client on which the user exists.</value>
        </member>
        <member name="E:dotIRC.IrcUser.NickNameChanged">
            <summary>
            Occurs when the nick name of the user has changed.
            </summary>
        </member>
        <member name="E:dotIRC.IrcUser.IsAwayChanged">
            <summary>
            Occurs when the user has been seen as away or here.
            </summary>
        </member>
        <member name="E:dotIRC.IrcUser.InviteReceived">
            <summary>
            Occurs when an invitation to join a channel has been received.
            </summary>
            <remarks>
            This event should only be raised for the local user (the instance of <see cref="T:dotIRC.IrcLocalUser"/>).
            </remarks>
        </member>
        <member name="E:dotIRC.IrcUser.Quit">
            <summary>
            Occurs when the user has quit the network. This may not always be sent.
            </summary>
        </member>
        <member name="E:dotIRC.IrcUser.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="M:dotIRC.IrcLocalUser.SendMessage(dotIRC.IIrcMessageTarget,System.String)">
            <inheritdoc cref="M:dotIRC.IrcLocalUser.SendMessage(System.Collections.Generic.IEnumerable{dotIRC.IIrcMessageTarget},System.String)"/>
            <param name="target">The <see cref="T:dotIRC.IIrcMessageTarget"/> to which to send the message.</param>
        </member>
        <member name="M:dotIRC.IrcLocalUser.SendMessage(System.Collections.Generic.IEnumerable{dotIRC.IIrcMessageTarget},System.String)">
            <inheritdoc cref="M:dotIRC.IrcLocalUser.SendMessage(System.Collections.Generic.IEnumerable{System.String},System.String,System.Text.Encoding)"/>
            <summary>
            <inheritdoc cref="M:dotIRC.IrcLocalUser.SendMessage(System.Collections.Generic.IEnumerable{System.String},System.String,System.Text.Encoding)" select="/summary/node()"/>
            A message target may be an <see cref="T:dotIRC.IrcUser"/>, <see cref="T:dotIRC.IrcChannel"/>, or <see cref="T:dotIRC.IrcTargetMask"/>.
            </summary>
            <param name="targets">A collection of targets to which to send the message.</param>
        </member>
        <member name="M:dotIRC.IrcLocalUser.SendMessage(System.String,System.String)">
            <inheritdoc cref="M:dotIRC.IrcLocalUser.SendMessage(System.Collections.Generic.IEnumerable{System.String},System.String,System.Text.Encoding)"/>
            <param name="target">The name of the target to which to send the message.</param>
        </member>
        <member name="M:dotIRC.IrcLocalUser.SendMessage(System.Collections.Generic.IEnumerable{System.String},System.String,System.Text.Encoding)">
            <summary>
            Sends a message to the specified target.
            </summary>
            <param name="targets">A collection of the names of targets to which to send the message.</param>
            <param name="text">The ASCII-encoded text of the message to send.</param>
            <param name="encoding">The encoding in which to send the value of <paramref name="text"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="targets"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="text"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:dotIRC.IrcLocalUser.SendNotice(dotIRC.IIrcMessageTarget,System.String)">
            <inheritdoc cref="M:dotIRC.IrcLocalUser.SendNotice(System.Collections.Generic.IEnumerable{dotIRC.IIrcMessageTarget},System.String)"/>
            <param name="target">The <see cref="T:dotIRC.IIrcMessageTarget"/> to which to send the notice.</param>
        </member>
        <member name="M:dotIRC.IrcLocalUser.SendNotice(System.Collections.Generic.IEnumerable{dotIRC.IIrcMessageTarget},System.String)">
            <inheritdoc cref="M:dotIRC.IrcLocalUser.SendNotice(System.Collections.Generic.IEnumerable{System.String},System.String,System.Text.Encoding)"/>
            <summary>
            <inheritdoc cref="M:dotIRC.IrcLocalUser.SendNotice(System.Collections.Generic.IEnumerable{System.String},System.String,System.Text.Encoding)" select="/summary/node()"/>
            A message target may be an <see cref="T:dotIRC.IrcUser"/>, <see cref="T:dotIRC.IrcChannel"/>, or <see cref="T:dotIRC.IrcTargetMask"/>.
            </summary>
            <param name="targets">A collection of targets to which to send the notice.</param>
        </member>
        <member name="M:dotIRC.IrcLocalUser.SendNotice(System.String,System.String)">
            <inheritdoc cref="M:dotIRC.IrcLocalUser.SendNotice(System.Collections.Generic.IEnumerable{System.String},System.String,System.Text.Encoding)"/>
            <param name="target">The name of the target to which to send the notice.</param>
        </member>
        <member name="M:dotIRC.IrcLocalUser.SendNotice(System.Collections.Generic.IEnumerable{System.String},System.String,System.Text.Encoding)">
            <summary>
            Sends a notice to the specified target.
            </summary>
            <param name="targets">A collection of the names of targets to which to send the notice.</param>
            <param name="text">The ASCII-encoded text of the notice to send.</param>
            <param name="encoding">The encoding in which to send the value of <paramref name="text"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="targets"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="text"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:dotIRC.IrcLocalUser.SetNickName(System.String)">
            <summary>
            Sets the nick name of the local user to the specified text.
            </summary>
            <param name="nickName">The new nick name of the local user.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="nickName"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:dotIRC.IrcLocalUser.SetAway(System.String)">
            <summary>
            Sets the local user as away, giving the specified message.
            </summary>
            <param name="text">The text of the response sent to a user when they try to message you while away.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="text"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:dotIRC.IrcLocalUser.UnsetAway">
            <summary>
            Sets the local user as here (no longer away).
            </summary>
        </member>
        <member name="M:dotIRC.IrcLocalUser.GetModes">
            <summary>
            Requests a list of the current modes of the user.
            </summary>
        </member>
        <member name="M:dotIRC.IrcLocalUser.SetModes(System.Char[])">
            <inheritdoc cref="M:dotIRC.IrcLocalUser.SetModes(System.Collections.Generic.IEnumerable{System.Char})"/>
        </member>
        <member name="M:dotIRC.IrcLocalUser.SetModes(System.Collections.Generic.IEnumerable{System.Char})">
            <inheritdoc cref="M:dotIRC.IrcLocalUser.SetModes(System.String)"/>
            <param name="newModes">A collection of mode characters that should become the new modes.
            Any modes in the collection that are not currently set will be set, and any nodes not in the collection that
            are currently set will be unset.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="newModes"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:dotIRC.IrcLocalUser.SetModes(System.Collections.Generic.IEnumerable{System.Char},System.Collections.Generic.IEnumerable{System.Char})">
            <inheritdoc cref="M:dotIRC.IrcLocalUser.SetModes(System.String)"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="setModes"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="unsetModes"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:dotIRC.IrcLocalUser.SetModes(System.String)">
            <summary>
            Sets the specified modes on the local user.
            </summary>
            <param name="modes">The mode string that specifies mode changes, which takes the form
            `( "+" / "-" ) *( mode character )`.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="modes"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:dotIRC.IrcLocalUser.OnModesChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:dotIRC.IrcLocalUser.ModesChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:dotIRC.IrcLocalUser.OnJoinedChannel(dotIRC.IrcChannelEventArgs)">
            <summary>
            Raises the <see cref="E:dotIRC.IrcLocalUser.JoinedChannel"/> event.
            </summary>
            <param name="e">The <see cref="T:dotIRC.IrcChannelEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:dotIRC.IrcLocalUser.OnLeftChannel(dotIRC.IrcChannelEventArgs)">
            <summary>
            Raises the <see cref="E:dotIRC.IrcLocalUser.LeftChannel"/> event.
            </summary>
            <param name="e">The <see cref="T:dotIRC.IrcChannelEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:dotIRC.IrcLocalUser.OnMessageSent(dotIRC.IrcMessageEventArgs)">
            <summary>
            Raises the <see cref="E:dotIRC.IrcLocalUser.MessageSent"/> event.
            </summary>
            <param name="e">The <see cref="T:dotIRC.IrcMessageEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:dotIRC.IrcLocalUser.OnMessageReceived(dotIRC.IrcMessageEventArgs)">
            <summary>
            Raises the <see cref="E:dotIRC.IrcLocalUser.MessageReceived"/> event.
            </summary>
            <param name="e">The <see cref="T:dotIRC.IrcMessageEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:dotIRC.IrcLocalUser.OnPreviewMessageReceived(dotIRC.IrcPreviewMessageEventArgs)">
            <summary>
            Raises the <see cref="E:dotIRC.IrcLocalUser.PreviewMessageReceived"/> event.
            </summary>
            <param name="e">The <see cref="T:dotIRC.IrcPreviewMessageEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:dotIRC.IrcLocalUser.OnNoticeSent(dotIRC.IrcMessageEventArgs)">
            <summary>
            Raises the <see cref="E:dotIRC.IrcLocalUser.NoticeSent"/> event.
            </summary>
            <param name="e">The <see cref="T:dotIRC.IrcMessageEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:dotIRC.IrcLocalUser.OnPreviewNoticeReceived(dotIRC.IrcPreviewMessageEventArgs)">
            <summary>
            Raises the <see cref="E:dotIRC.IrcLocalUser.PreviewNoticeReceived"/> event.
            </summary>
            <param name="e">The <see cref="T:dotIRC.IrcPreviewMessageEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:dotIRC.IrcLocalUser.OnNoticeReceived(dotIRC.IrcMessageEventArgs)">
            <summary>
            Raises the <see cref="E:dotIRC.IrcLocalUser.NoticeReceived"/> event.
            </summary>
            <param name="e">The <see cref="T:dotIRC.IrcMessageEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:dotIRC.IrcLocalUser.IsService">
            <summary>
            Gets whether the local user is a service or normal user.
            </summary>
            <value><see langword="true"/> if the user is a service; <see langword="false"/>, if the user is a normal
            user.</value>
        </member>
        <member name="P:dotIRC.IrcLocalUser.Modes">
            <summary>
            Gets a read-only collection of the modes the user currently has.
            </summary>
            <value>The current modes of the user.</value>
        </member>
        <member name="P:dotIRC.IrcLocalUser.ServiceDistribution">
            <summary>
            Gets the distribution of the service, which determines its visibility to users on specific servers.
            </summary>
            <value>A wildcard expression for matching against the names of servers on which the service should be
            visible.</value>
        </member>
        <member name="P:dotIRC.IrcLocalUser.ServiceDescription">
            <summary>
            Gets the distribution of the service, which determines its visibility to users on specific servers.
            </summary>
            <value>A wildcard expression for matching against the names of servers on which the service should be
            visible.</value>
        </member>
        <member name="E:dotIRC.IrcLocalUser.ModesChanged">
            <summary>
            Occurs when the modes of the local user have changed.
            </summary>
        </member>
        <member name="E:dotIRC.IrcLocalUser.JoinedChannel">
            <summary>
            Occurs when the local user has joined a channel.
            </summary>
        </member>
        <member name="E:dotIRC.IrcLocalUser.LeftChannel">
            <summary>
            Occurs when the local user has left a channel.
            </summary>
        </member>
        <member name="E:dotIRC.IrcLocalUser.MessageSent">
            <summary>
            Occurs when the local user has sent a message.
            </summary>
        </member>
        <member name="E:dotIRC.IrcLocalUser.MessageReceived">
            <summary>
            Occurs when the local user has received a message.
            </summary>
        </member>
        <member name="E:dotIRC.IrcLocalUser.PreviewMessageReceived">
            <summary>
            Occurs when the local user has received a message, before the <see cref="E:dotIRC.IrcLocalUser.MessageReceived"/> event.
            </summary>
        </member>
        <member name="E:dotIRC.IrcLocalUser.NoticeSent">
            <summary>
            Occurs when the local user has sent a notice.
            </summary>
        </member>
        <member name="E:dotIRC.IrcLocalUser.NoticeReceived">
            <summary>
            Occurs when the local user has received a notice.
            </summary>
        </member>
        <member name="E:dotIRC.IrcLocalUser.PreviewNoticeReceived">
            <summary>
            Occurs when the local user has received a notice, before the <see cref="E:dotIRC.IrcLocalUser.NoticeReceived"/> event.
            </summary>
        </member>
        <member name="T:dotIRC.IrcServer">
            <summary>
            Represents an IRC server from the view of a particular client.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:dotIRC.IrcServer.ToString">
            <summary>
            Returns a string representation of this instance.
            </summary>
            <returns>A string that represents this instance.</returns>
        </member>
        <member name="P:dotIRC.IrcServer.HostName">
            <summary>
            Gets the host name of the server.
            </summary>
            <value>The host name of the server.</value>
        </member>
        <member name="T:dotIRC.IrcUserCollection">
            <summary>
            Represents a collection of <see cref="T:dotIRC.IrcUser"/> objects.
            </summary>
            <threadsafety static="true" instance="false"/>
            <seealso cref="T:dotIRC.IrcUser"/>
        </member>
        <member name="P:dotIRC.IrcUserCollection.Client">
            <summary>
            Gets the client to which the collection of users belongs.
            </summary>
            <value>The client to which the collection of users belongs.</value>
        </member>
        <member name="T:dotIRC.IrcChannelCollection">
            <summary>
            Represents a collection of <see cref="T:dotIRC.IrcChannel"/> objects.
            </summary>
            <threadsafety static="true" instance="false"/>
            <seealso cref="T:dotIRC.IrcChannel"/>
        </member>
        <member name="M:dotIRC.IrcChannelCollection.Join(System.String[])">
            <inheritdoc cref="M:dotIRC.IrcChannelCollection.Join(System.Collections.Generic.IEnumerable{System.String})"/>
        </member>
        <member name="M:dotIRC.IrcChannelCollection.Join(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc cref="M:dotIRC.IrcChannelCollection.Join(System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.String}})"/>
            <param name="channels">A collection of the names of channels to join.</param>
        </member>
        <member name="M:dotIRC.IrcChannelCollection.Join(System.Tuple{System.String,System.String}[])">
            <inheritdoc cref="M:dotIRC.IrcChannelCollection.Join(System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.String}})"/>
        </member>
        <member name="M:dotIRC.IrcChannelCollection.Join(System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.String}})">
            <summary>
            Joins the specified channels.
            </summary>
            <param name="channels">A collection of 2-tuples of the names of channels to join and their keys.</param>
        </member>
        <member name="M:dotIRC.IrcChannelCollection.Leave(System.String[])">
            <inheritdoc cref="M:dotIRC.IrcChannelCollection.Leave(System.Collections.Generic.IEnumerable{System.String},System.String)"/>
        </member>
        <member name="M:dotIRC.IrcChannelCollection.Leave(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Leaves the specified channels, giving the specified comment.
            </summary>
            <param name="channels">A collection of the names of channels to leave.</param>
            <param name="comment">The comment to send the server upon leaving the channel, or <see langword="null"/> for
            no comment.</param>
        </member>
        <member name="P:dotIRC.IrcChannelCollection.Client">
            <summary>
            Gets the client to which the collection of channels belongs.
            </summary>
            <value>The client to which the collection of channels belongs.</value>
        </member>
        <member name="T:dotIRC.IrcChannelUser">
            <summary>
            Represents an IRC user that exists on a specific channel on a specific <see cref="T:dotIRC.IrcClient"/>.
            </summary>
            <threadsafety static="true" instance="false"/>
            <seealso cref="T:dotIRC.IrcUser"/>
            <seealso cref="T:dotIRC.IrcChannel"/>
        </member>
        <member name="M:dotIRC.IrcChannelUser.Kick(System.String)">
            <summary>
            Kicks the user from the channel, giving the specified comment.
            </summary>
            <param name="comment">The comment to give for the kick, or <see langword="null"/> for none.</param>
        </member>
        <member name="M:dotIRC.IrcChannelUser.Op">
            <summary>
            Gives the user operator privileges in the channel.
            </summary>
        </member>
        <member name="M:dotIRC.IrcChannelUser.DeOp">
            <summary>
            Removes operator privileges from the user in the channel.
            </summary>
        </member>
        <member name="M:dotIRC.IrcChannelUser.Voice">
            <summary>
            Voices the user in the channel.
            </summary>
        </member>
        <member name="M:dotIRC.IrcChannelUser.DeVoice">
            <summary>
            Devoices the user in the channel
            </summary>
        </member>
        <member name="M:dotIRC.IrcChannelUser.OnModesChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:dotIRC.IrcChannelUser.ModesChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:dotIRC.IrcChannelUser.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:dotIRC.IrcChannelUser.PropertyChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:dotIRC.IrcChannelUser.ToString">
            <summary>
            Returns a string representation of this instance.
            </summary>
            <returns>A string that represents this instance.</returns>
        </member>
        <member name="P:dotIRC.IrcChannelUser.Modes">
            <summary>
            A read-only collection of the channel modes the user currently has.
            </summary>
            <value>The current channel modes of the user.</value>
        </member>
        <member name="P:dotIRC.IrcChannelUser.Channel">
            <summary>
            Gets or sets the channel.
            </summary>
            <value>The channel.</value>
        </member>
        <member name="P:dotIRC.IrcChannelUser.User">
            <summary>
            Gets the <see cref="T:dotIRC.IrcUser"/> that is represented by the <see cref="T:dotIRC.IrcChannelUser"/>.
            </summary>
            <value>The <see cref="T:dotIRC.IrcUser"/> that is represented by the <see cref="T:dotIRC.IrcChannelUser"/>.</value>
        </member>
        <member name="E:dotIRC.IrcChannelUser.ModesChanged">
            <summary>
            Occurs when the channel modes of the user have changed.
            </summary>
        </member>
        <member name="E:dotIRC.IrcChannelUser.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:dotIRC.IrcChannel">
            <summary>
            Represents an IRC channel that exists on a specific <see cref="T:dotIRC.IrcClient"/>.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:dotIRC.IrcChannel.GetChannelUser(dotIRC.IrcUser)">
            <summary>
            Gets the <see cref="T:dotIRC.IrcChannelUser"/> in the channel that corresponds to the specified
            <see cref="T:dotIRC.IrcUser"/>, or <see langword="null"/> if none is found.
            </summary>
            <param name="user">The <see cref="T:dotIRC.IrcUser"/> for which to look.</param>
            <returns>The <see cref="T:dotIRC.IrcChannelUser"/> in the channel that corresponds to the specified
            <see cref="T:dotIRC.IrcUser"/>, or <see langword="null"/> if none is found.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="user"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:dotIRC.IrcChannel.Invite(dotIRC.IrcUser)">
            <inheritdoc cref="M:dotIRC.IrcChannel.Invite(System.String)"/>
            <param name="user">The user to invite to the channel</param>
        </member>
        <member name="M:dotIRC.IrcChannel.Invite(System.String)">
            <summary>
            Invites the the specified user to the channel.
            </summary>
            <param name="userNickName">The nick name of the user to invite.</param>
        </member>
        <member name="M:dotIRC.IrcChannel.Kick(System.String,System.String)">
            <summary>
            Kicks the specified user from the channel, giving the specified comment.
            </summary>
            <param name="userNickName">The nick name of the user to kick from the channel.</param>
            <param name="comment">The comment to give for the kick, or <see langword="null"/> for none.</param>
        </member>
        <member name="M:dotIRC.IrcChannel.GetTopic">
            <summary>
            Requests the current topic of the channel.
            </summary>
        </member>
        <member name="M:dotIRC.IrcChannel.SetTopic(System.String)">
            <summary>
            Sets the topic of the channel to the specified text.
            </summary>
            <param name="newTopic">The new topic to set.</param>
        </member>
        <member name="M:dotIRC.IrcChannel.GetModes(System.String)">
            <summary>
            Requests a list of the current modes of the channel, or if <paramref name="modes"/> is specified, the
            settings for the specified modes.
            </summary>
            <param name="modes">The modes for which to get the current settings, or <see langword="null"/> for all
            current channel modes.</param>
        </member>
        <member name="M:dotIRC.IrcChannel.SetModes(System.Char[])">
            <inheritdoc cref="M:dotIRC.IrcChannel.SetModes(System.Collections.Generic.IEnumerable{System.Char})"/>
        </member>
        <member name="M:dotIRC.IrcChannel.SetModes(System.Collections.Generic.IEnumerable{System.Char})">
            <inheritdoc cref="M:dotIRC.IrcChannel.SetModes(System.String,System.Collections.Generic.IEnumerable{System.String})"/>
            <param name="newModes">A collection of mode characters that should become the new modes.
            Any modes in the collection that are not currently set will be set, and any nodes not in the collection that
            are currently set will be unset.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="newModes"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:dotIRC.IrcChannel.SetModes(System.Collections.Generic.IEnumerable{System.Char},System.Collections.Generic.IEnumerable{System.Char},System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc cref="M:dotIRC.IrcChannel.SetModes(System.String,System.Collections.Generic.IEnumerable{System.String})"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="setModes"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="unsetModes"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:dotIRC.IrcChannel.SetModes(System.String,System.String[])">
            <inheritdoc cref="M:dotIRC.IrcChannel.SetModes(System.String,System.Collections.Generic.IEnumerable{System.String})"/>
        </member>
        <member name="M:dotIRC.IrcChannel.SetModes(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Sets the specified modes on the channel.
            </summary>
            <param name="modes">The mode string that specifies mode changes, which takes the form
            `( "+" / "-" ) *( mode character )`.</param>
            <param name="modeParameters">A collection of parameters to he modes, or <see langword="null"/> for no
            parameters.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="modes"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:dotIRC.IrcChannel.Leave(System.String)">
            <summary>
            Leaves the channel, giving the specified comment.
            </summary>
            <param name="comment">The comment to send the server upon leaving the channel, or <see langword="null"/> for
            no comment.</param>
        </member>
        <member name="M:dotIRC.IrcChannel.OnUsersListReceived(System.EventArgs)">
            <summary>
            Raises the <see cref="E:dotIRC.IrcChannel.UsersListReceived"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:dotIRC.IrcChannel.OnModesChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:dotIRC.IrcChannel.ModesChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:dotIRC.IrcChannel.OnTopicChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:dotIRC.IrcChannel.TopicChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:dotIRC.IrcChannel.OnUserJoined(dotIRC.IrcChannelUserEventArgs)">
            <summary>
            Raises the <see cref="E:dotIRC.IrcChannel.UserJoined"/> event.
            </summary>
            <param name="e">The <see cref="T:dotIRC.IrcChannelUserEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:dotIRC.IrcChannel.OnUserLeft(dotIRC.IrcChannelUserEventArgs)">
            <summary>
            Raises the <see cref="E:dotIRC.IrcChannel.UserLeft"/> event.
            </summary>
            <param name="e">The <see cref="T:dotIRC.IrcChannelUserEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:dotIRC.IrcChannel.OnUserKicked(dotIRC.IrcChannelUserEventArgs)">
            <summary>
            Raises the <see cref="E:dotIRC.IrcChannel.UserKicked"/> event.
            </summary>
            <param name="e">The <see cref="T:dotIRC.IrcChannelUserEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:dotIRC.IrcChannel.OnUserInvited(dotIRC.IrcUserEventArgs)">
            <summary>
            Raises the <see cref="E:dotIRC.IrcChannel.UserInvited"/> event.
            </summary>
            <param name="e">The <see cref="T:dotIRC.IrcUserEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:dotIRC.IrcChannel.OnMessageReceived(dotIRC.IrcMessageEventArgs)">
            <summary>
            Raises the <see cref="E:dotIRC.IrcChannel.MessageReceived"/> event.
            </summary>
            <param name="e">The <see cref="T:dotIRC.IrcMessageEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:dotIRC.IrcChannel.OnPreviewMessageReceived(dotIRC.IrcPreviewMessageEventArgs)">
            <summary>
            Raises the <see cref="E:dotIRC.IrcChannel.PreviewMessageReceived"/> event.
            </summary>
            <param name="e">The <see cref="T:dotIRC.IrcPreviewMessageEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:dotIRC.IrcChannel.OnNoticeReceived(dotIRC.IrcMessageEventArgs)">
            <summary>
            Raises the <see cref="E:dotIRC.IrcChannel.NoticeReceived"/> event.
            </summary>
            <param name="e">The <see cref="T:dotIRC.IrcMessageEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:dotIRC.IrcChannel.OnPreviewNoticeReceived(dotIRC.IrcPreviewMessageEventArgs)">
            <summary>
            Raises the <see cref="E:dotIRC.IrcChannel.PreviewNoticeReceived"/> event.
            </summary>
            <param name="e">The <see cref="T:dotIRC.IrcPreviewMessageEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:dotIRC.IrcChannel.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:dotIRC.IrcChannel.PropertyChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:dotIRC.IrcChannel.ToString">
            <summary>
            Returns a string representation of this instance.
            </summary>
            <returns>A string that represents this instance.</returns>
        </member>
        <member name="P:dotIRC.IrcChannel.Name">
            <summary>
            Gets the name of the channel.
            </summary>
            <value>The name of the channel.</value>
        </member>
        <member name="P:dotIRC.IrcChannel.Type">
            <summary>
            Gets the type of the channel.
            </summary>
            <value>The type of the channel.</value>
        </member>
        <member name="P:dotIRC.IrcChannel.Topic">
            <summary>
            Gets the current topic of the channel.
            </summary>
            <value>The current topic of the channel.</value>
        </member>
        <member name="P:dotIRC.IrcChannel.Modes">
            <summary>
            Gets a read-only collection of the modes the channel currently has.
            </summary>
            <value>The current modes of the channel.</value>
        </member>
        <member name="P:dotIRC.IrcChannel.Users">
            <summary>
            Gets a collection of all channel users currently in the channel.
            </summary>
            <value>A collection of all users currently in the channel.</value>
        </member>
        <member name="P:dotIRC.IrcChannel.Client">
            <summary>
            Gets the client to which the channel belongs.
            </summary>
            <value>The client to which the channel belongs.</value>
        </member>
        <member name="E:dotIRC.IrcChannel.UsersListReceived">
            <summary>
            Occurs when the list of users in the channel has been received.
            The list of users is sent initially upon joining the channel, or on the request of the client.
            </summary>
        </member>
        <member name="E:dotIRC.IrcChannel.ModesChanged">
            <summary>
            Occurs when any of the modes of the channel have changed.
            </summary>
        </member>
        <member name="E:dotIRC.IrcChannel.TopicChanged">
            <summary>
            Occurs when the topic of the channel has changed.
            </summary>
        </member>
        <member name="E:dotIRC.IrcChannel.UserJoined">
            <summary>
            Occurs when a user has joined the channel.
            </summary>
        </member>
        <member name="E:dotIRC.IrcChannel.UserLeft">
            <summary>
            Occurs when a user has left the channel.
            </summary>
        </member>
        <member name="E:dotIRC.IrcChannel.UserKicked">
            <summary>
            Occurs when a user is kicked from the channel.
            </summary>
        </member>
        <member name="E:dotIRC.IrcChannel.UserInvited">
            <summary>
            Occurs when a user is invited to join the channel.
            </summary>
        </member>
        <member name="E:dotIRC.IrcChannel.PreviewMessageReceived">
            <summary>
            Occurs when the channel has received a message, before the <see cref="E:dotIRC.IrcChannel.MessageReceived"/> event.
            </summary>
        </member>
        <member name="E:dotIRC.IrcChannel.MessageReceived">
            <summary>
            Occurs when the channel has received a message.
            </summary>
        </member>
        <member name="E:dotIRC.IrcChannel.NoticeReceived">
            <summary>
            Occurs when the channel has received a notice.
            </summary>
        </member>
        <member name="E:dotIRC.IrcChannel.PreviewNoticeReceived">
            <summary>
            Occurs when the channel has received a notice, before the <see cref="E:dotIRC.IrcChannel.NoticeReceived"/> event.
            </summary>
        </member>
        <member name="E:dotIRC.IrcChannel.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:dotIRC.IrcChannelType">
            <summary>
            Defines the types of channels. Each channel may only be of a single type at any one time.
            </summary>
        </member>
        <member name="F:dotIRC.IrcChannelType.Unspecified">
            <summary>
            The channel type is unspecified.
            </summary>
        </member>
        <member name="F:dotIRC.IrcChannelType.Public">
            <summary>
            The channel is public. The server always lists this channel.
            </summary>
        </member>
        <member name="F:dotIRC.IrcChannelType.Private">
            <summary>
            The channel is private. The server never lists this channel.
            </summary>
        </member>
        <member name="F:dotIRC.IrcChannelType.Secret">
            <summary>
            The channel is secret. The server never lists this channel and pretends it does not exist when responding to
            queries.
            </summary>
        </member>
        <member name="T:dotIRC.IrcChannelListReceivedEventArgs">
            <summary>
            Provides data for the <see cref="E:dotIRC.IrcClient.ChannelListReceived"/> event.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:dotIRC.IrcChannelListReceivedEventArgs.#ctor(System.Collections.Generic.IList{dotIRC.IrcChannelInfo})">
            <summary>
            Initializes a new instance of the <see cref="T:dotIRC.IrcChannelListReceivedEventArgs"/> class.
            </summary>
            <param name="channels">A list of information about the channels that was returned by the server.</param>
        </member>
        <member name="P:dotIRC.IrcChannelListReceivedEventArgs.Channels">
            <summary>
            Gets the list of information about the channels that was returned by the server.
            </summary>
            <value>The list of channels.</value>
        </member>
        <member name="T:dotIRC.IrcServerVersionInfoEventArgs">
            <summary>
            Provides data for the <see cref="E:dotIRC.IrcClient.ServerVersionInfoReceived"/> event.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:dotIRC.IrcServerVersionInfoEventArgs.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:dotIRC.IrcServerVersionInfoEventArgs"/> class.
            </summary>
            <param name="version">The version of the server.</param>
            <param name="debugLevel">The debug level of the server.</param>
            <param name="serverName">The name of the server.</param>
            <param name="comments">The comments about the server.</param>
        </member>
        <member name="P:dotIRC.IrcServerVersionInfoEventArgs.Version">
            <summary>
            Gets the version of the server.
            </summary>
            <value>The version of the server.</value>
        </member>
        <member name="P:dotIRC.IrcServerVersionInfoEventArgs.DebugLevel">
            <summary>
            Gets the debug level of the server.
            </summary>
            <value>The debug level of the server.</value>
        </member>
        <member name="P:dotIRC.IrcServerVersionInfoEventArgs.ServerName">
            <summary>
            Gets the name of the server to which the version information applies.
            </summary>
            <value>The name of the server.</value>
        </member>
        <member name="P:dotIRC.IrcServerVersionInfoEventArgs.Comments">
            <summary>
            Gets the comments about the server.
            </summary>
            <value>The comments about the server.</value>
        </member>
        <member name="T:dotIRC.IrcServerTimeEventArgs">
            <summary>
            Provides data for the <see cref="E:dotIRC.IrcClient.ServerTimeReceived"/> event.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:dotIRC.IrcServerTimeEventArgs.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:dotIRC.IrcServerTimeEventArgs"/> class.
            </summary>
            <param name="serverName">The name of the server.</param>
            <param name="dateTime">The local date/time received from the server.</param>
        </member>
        <member name="P:dotIRC.IrcServerTimeEventArgs.ServerName">
            <summary>
            Gets the name of the server to which the version information applies.
            </summary>
            <value>The name of the server.</value>
        </member>
        <member name="P:dotIRC.IrcServerTimeEventArgs.DateTime">
            <summary>
            Gets the local date/time for the server.
            </summary>
            <value>The local date/time for the server.</value>
        </member>
        <member name="T:dotIRC.IrcServerLinksListReceivedEventArgs">
            <summary>
            Provides data for the <see cref="E:dotIRC.IrcClient.ServerLinksListReceived"/> event.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:dotIRC.IrcServerLinksListReceivedEventArgs.#ctor(System.Collections.Generic.IList{dotIRC.IrcServerInfo})">
            <summary>
            Initializes a new instance of the <see cref="T:dotIRC.IrcServerLinksListReceivedEventArgs"/> class.
            </summary>
            <param name="links">A list of information about the server links that was returned by the server.</param>
        </member>
        <member name="P:dotIRC.IrcServerLinksListReceivedEventArgs.Links">
            <summary>
            Gets the list of information about the server links that was returned by the server
            </summary>
            <value>The list of server links.</value>
        </member>
        <member name="T:dotIRC.IrcServerStatsReceivedEventArgs">
            <summary>
            Provides data for the <see cref="E:dotIRC.IrcClient.ServerStatsReceived"/> event.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:dotIRC.IrcServerStatsReceivedEventArgs.#ctor(System.Collections.Generic.IList{dotIRC.IrcServerStatisticalEntry})">
            <summary>
            Initializes a new instance of the <see cref="T:dotIRC.IrcServerStatsReceivedEventArgs"/> class.
            </summary>
            <param name="entries">A list of statistical entries that was returned by the server.</param>
        </member>
        <member name="P:dotIRC.IrcServerStatsReceivedEventArgs.Entries">
            <summary>
            Gets the list of statistical entries that was returned by the server.
            </summary>
            <value>The list of statistical entries.</value>
        </member>
        <member name="T:dotIRC.IrcPreviewMessageEventArgs">
            <summary>
            <inheritdoc select="/summary/node()"/>
            Gives the option to handle the preview event and thus stop the normal event from being raised.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="T:dotIRC.IrcMessageEventArgs">
            <summary>
            Provides data for events that are raised when an IRC message or notice is sent or received.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:dotIRC.IrcMessageEventArgs.#ctor(dotIRC.IIrcMessageSource,System.Collections.Generic.IList{dotIRC.IIrcMessageTarget},System.String,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:dotIRC.IrcMessageEventArgs"/> class.
            </summary>
            <param name="source">The source of the message.</param>
            <param name="targets">A list of the targets of the message.</param>
            <param name="text">The text of the message.</param>
            <param name="encoding">The encoding of the message text.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="targets"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="text"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:dotIRC.IrcMessageEventArgs.GetText(System.Text.Encoding)">
            <summary>
            Gets the text of the message in the specified encoding.
            </summary>
            <param name="encoding">The encoding in which to get the message text, or <see langword="null"/> to use the
            default encoding.</param>
            <returns>The text of the message.</returns>
        </member>
        <member name="P:dotIRC.IrcMessageEventArgs.Source">
            <summary>
            Gets the source of the message.
            </summary>
            <value>The source of the message.</value>
        </member>
        <member name="P:dotIRC.IrcMessageEventArgs.Targets">
            <summary>
            Gets a list of the targets of the message.
            </summary>
            <value>The targets of the message.</value>
        </member>
        <member name="P:dotIRC.IrcMessageEventArgs.Text">
            <summary>
            Gets the text of the message.
            </summary>
            <value>The text of the message.</value>
        </member>
        <member name="P:dotIRC.IrcMessageEventArgs.Encoding">
            <summary>
            Gets the encoding of the message text.
            </summary>
            <value>The encoding of the message text.</value>
        </member>
        <member name="M:dotIRC.IrcPreviewMessageEventArgs.#ctor(dotIRC.IIrcMessageSource,System.Collections.Generic.IList{dotIRC.IIrcMessageTarget},System.String,System.Text.Encoding)">
            <inheritdoc/>
        </member>
        <member name="P:dotIRC.IrcPreviewMessageEventArgs.Handled">
            <summary>
            Gets or sets whether the event has been handled. If it is handled, the corresponding normal (non-preview)
            event is not raised.
            </summary>
            <value><see langword="true"/> if the event has been handled; <see langword="false"/>, otherwise.</value>
        </member>
        <member name="T:dotIRC.IrcChannelInvitationEventArgs">
            <summary>
            Provides data for the <see cref="E:dotIRC.IrcClient.PingReceived"/> event.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="T:dotIRC.IrcChannelEventArgs">
            <summary>
            Provides data for events that concern an <see cref="T:dotIRC.IrcChannel"/>.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="T:dotIRC.IrcCommentEventArgs">
            <summary>
            Provides data for events that specify a name.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:dotIRC.IrcCommentEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:dotIRC.IrcCommentEventArgs"/> class.
            </summary>
            <param name="comment">The comment that the event specified.</param>
        </member>
        <member name="P:dotIRC.IrcCommentEventArgs.Comment">
            <summary>
            Gets the comment that the event specified.
            </summary>
            <value>The comment that the event specified.</value>
        </member>
        <member name="M:dotIRC.IrcChannelEventArgs.#ctor(dotIRC.IrcChannel,System.String)">
            <inheritdoc/>
            <summary>
            Initializes a new instance of the <see cref="T:dotIRC.IrcChannelEventArgs"/> class.
            </summary>
            <param name="channel">The channel that the event concerns.</param>
        </member>
        <member name="P:dotIRC.IrcChannelEventArgs.Channel">
            <summary>
            Gets the channel that the event concerns.
            </summary>
            <value>The channel that the event concerns.</value>
        </member>
        <member name="M:dotIRC.IrcChannelInvitationEventArgs.#ctor(dotIRC.IrcChannel,dotIRC.IrcUser)">
            <summary>
            Initializes a new instance of the <see cref="T:dotIRC.IrcChannelInvitationEventArgs"/> class.
            </summary>
            <param name="channel">The channel to which the recipient user is invited.</param>
            <param name="inviter">The user inviting the recipient user to the channel.</param>
        </member>
        <member name="P:dotIRC.IrcChannelInvitationEventArgs.Inviter">
            <summary>
            Gets the user inviting the recipient user to the channel
            </summary>
            <value>The inviter user.</value>
        </member>
        <member name="T:dotIRC.IrcChannelUserEventArgs">
            <summary>
            Provides data for events that concern an <see cref="T:dotIRC.IrcChannelUser"/>.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:dotIRC.IrcChannelUserEventArgs.#ctor(dotIRC.IrcChannelUser,System.String)">
            <inheritdoc/>
            <summary>
            Initializes a new instance of the <see cref="T:dotIRC.IrcChannelUserEventArgs"/> class.
            </summary>
            <param name="channelUser">The channel user that the event concerns.</param>
        </member>
        <member name="P:dotIRC.IrcChannelUserEventArgs.ChannelUser">
            <summary>
            Gets the channel user that the event concerns.
            </summary>
            <value>The channel user that the event concerns.</value>
        </member>
        <member name="T:dotIRC.IrcUserEventArgs">
            <summary>
            Provides data for events that concern an <see cref="T:dotIRC.IrcUser"/>.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:dotIRC.IrcUserEventArgs.#ctor(dotIRC.IrcUser,System.String)">
            <inheritdoc/>
            <summary>
            Initializes a new instance of the <see cref="T:dotIRC.IrcUserEventArgs"/> class.
            </summary>
            <param name="user">The user that the event concerns.</param>
        </member>
        <member name="P:dotIRC.IrcUserEventArgs.User">
            <summary>
            Gets the user that the event concerns.
            </summary>
            <value>The user that the event concerns.</value>
        </member>
        <member name="T:dotIRC.IrcNameEventArgs">
            <summary>
            Provides data for events that specify a comment.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:dotIRC.IrcNameEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:dotIRC.IrcNameEventArgs"/> class.
            </summary>
            <param name="name">The name that the event specified.</param>
        </member>
        <member name="P:dotIRC.IrcNameEventArgs.Name">
            <summary>
            Gets the name that the event specified.
            </summary>
            <value>The name that the event specified.</value>
        </member>
        <member name="T:dotIRC.IrcPingOrPongReceivedEventArgs">
            <summary>
            Provides data for the <see cref="E:dotIRC.IrcClient.PingReceived"/> and <see cref="E:dotIRC.IrcClient.PongReceived"/> events.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:dotIRC.IrcPingOrPongReceivedEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:dotIRC.IrcPingOrPongReceivedEventArgs"/> class.
            </summary>
            <param name="server">The name of the server that is the source of the ping or pong.</param>
        </member>
        <member name="P:dotIRC.IrcPingOrPongReceivedEventArgs.Server">
            <summary>
            Gets the name of the server that is the source of the ping or pong.
            </summary>
            <value>The name of the server.</value>
        </member>
        <member name="T:dotIRC.IrcServerInfoEventArgs">
            <summary>
            Provides data for events that specify information about a server.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:dotIRC.IrcServerInfoEventArgs.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:dotIRC.IrcServerInfoEventArgs"/> class.
            </summary>
            <param name="address">The address of the server.</param>
            <param name="port">The port on which to connect to the server.</param>
        </member>
        <member name="P:dotIRC.IrcServerInfoEventArgs.Address">
            <summary>
            Gets the address of the server.
            </summary>
            <value>The address of the server.</value>
        </member>
        <member name="P:dotIRC.IrcServerInfoEventArgs.Port">
            <summary>
            Gets the port on which to connect to the server.
            </summary>
            <value>The port on which to connect to the server.</value>
        </member>
        <member name="T:dotIRC.IrcErrorMessageEventArgs">
            <summary>
            Provides data for the <see cref="E:dotIRC.IrcClient.ErrorMessageReceived"/> event.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:dotIRC.IrcErrorMessageEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:dotIRC.IrcErrorMessageEventArgs"/> class.
            </summary>
            <param name="message">The error message given by the server.</param>
        </member>
        <member name="P:dotIRC.IrcErrorMessageEventArgs.Message">
            <summary>
            Gets the text of the error message.
            </summary>
            <value>The text of the error message.</value>
        </member>
        <member name="T:dotIRC.IrcProtocolErrorEventArgs">
            <summary>
            Provides data for the <see cref="E:dotIRC.IrcClient.ProtocolError"/> event.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:dotIRC.IrcProtocolErrorEventArgs.#ctor(System.Int32,System.Collections.Generic.IList{System.String},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:dotIRC.IrcProtocolErrorEventArgs"/> class.
            </summary>
            <param name="code">The code.</param>
            <param name="parameters">The parameters.</param>
            <param name="message">The message.</param>
        </member>
        <member name="P:dotIRC.IrcProtocolErrorEventArgs.Code">
            <summary>
            Gets or sets the numeric code that indicates the type of error.
            </summary>
            <value>The numeric code that indicates the type of error.</value>
        </member>
        <member name="P:dotIRC.IrcProtocolErrorEventArgs.Parameters">
            <summary>
            Gets a list of the parameters of the error.
            </summary>
            <value>A lsit of the parameters of the error.</value>
        </member>
        <member name="P:dotIRC.IrcProtocolErrorEventArgs.Message">
            <summary>
            Gets the text of the error message.
            </summary>
            <value>The text of the error message.</value>
        </member>
        <member name="T:dotIRC.IrcRawMessageEventArgs">
            <summary>
            Provides data for the <see cref="E:dotIRC.IrcClient.RawMessageSent"/> and
            <see cref="E:dotIRC.IrcClient.RawMessageReceived"/> events.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:dotIRC.IrcRawMessageEventArgs.#ctor(dotIRC.IrcClient.IrcMessage,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:dotIRC.IrcRawMessageEventArgs"/> class.
            </summary>
            <param name="message">The message that was sent/received.</param>
            <param name="rawContent">The raw content of the message.</param>
        </member>
        <member name="P:dotIRC.IrcRawMessageEventArgs.Message">
            <summary>
            Gets the message that was sent/received by the client.
            </summary>
            <value>The message that was sent/received by the client.</value>
        </member>
        <member name="P:dotIRC.IrcRawMessageEventArgs.RawContent">
            <summary>
            Gets the raw content of the message.
            </summary>
            <value>The raw content of the message.</value>
        </member>
        <member name="T:dotIRC.IrcValidateSslCertificateEventArgs">
            <summary>
            Provides data for the <see cref="E:dotIRC.IrcClient.ValidateSslCertificate"/> event.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:dotIRC.IrcValidateSslCertificateEventArgs.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
            <summary>
            Initializes a new instance of the <see cref="T:dotIRC.IrcValidateSslCertificateEventArgs"/> class.
            </summary>
            <param name="certificate">The certificate used to authenticate the remote party.</param>
            <param name="chain">The chain of certificate authorities.</param>
            <param name="sslPolicyErrors">The errors associated with the remote certificate.</param>
        </member>
        <member name="P:dotIRC.IrcValidateSslCertificateEventArgs.Certificate">
            <summary>
            Gets the certificate used to authenticate the remote party..
            </summary>
            <value>The certificate.</value>
        </member>
        <member name="P:dotIRC.IrcValidateSslCertificateEventArgs.Chain">
            <summary>
            Gets the chain of certificate authorities associated with the remote certificate.
            </summary>
            <value>The chain.</value>
        </member>
        <member name="P:dotIRC.IrcValidateSslCertificateEventArgs.SslPolicyErrors">
            <summary>
            Gets the errors associated with the remote certificate.
            </summary>
            <value>The SSL policy errors.</value>
        </member>
        <member name="P:dotIRC.IrcValidateSslCertificateEventArgs.IsValid">
            <summary>
            Gets or sets whether the certificate given by the server is valid.
            </summary>
            <value><see langword="true"/> if the certificate is valid; <see langword="false"/>, otherwise.</value>
        </member>
        <member name="T:dotIRC.IrcErrorEventArgs">
            <summary>
            Provides data for the <see cref="E:dotIRC.IrcClient.Error"/> event.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:dotIRC.IrcErrorEventArgs.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:dotIRC.IrcErrorEventArgs"/> class.
            </summary>
            <param name="error">The error.</param>
        </member>
        <member name="P:dotIRC.IrcErrorEventArgs.Error">
            <summary>
            Gets the error encountered by the client.
            </summary>
            <value>The error encountered by the client.</value>
        </member>
        <member name="T:dotIRC.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:dotIRC.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:dotIRC.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:dotIRC.Properties.Resources.MessageCannotSetUserMode">
            <summary>
              Looks up a localized string similar to Cannot set user mode for &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:dotIRC.Properties.Resources.MessageInvalidChannelType">
            <summary>
              Looks up a localized string similar to The channel type &apos;{0}&apos; sent by the server is invalid..
            </summary>
        </member>
        <member name="P:dotIRC.Properties.Resources.MessageInvalidCommand">
            <summary>
              Looks up a localized string similar to The message command &apos;{0}&apos; is invalid..
            </summary>
        </member>
        <member name="P:dotIRC.Properties.Resources.MessageInvalidCommandDefinition">
            <summary>
              Looks up a localized string similar to The command definition &apos;{0}&apos; is invalid..
            </summary>
        </member>
        <member name="P:dotIRC.Properties.Resources.MessageInvalidMessageCommand">
            <summary>
              Looks up a localized string similar to The command &apos;{0}&apos; was not recognised..
            </summary>
        </member>
        <member name="P:dotIRC.Properties.Resources.MessageInvalidMiddleParameter">
            <summary>
              Looks up a localized string similar to The non-trailing parameter &apos;{0}&apos; is invalid..
            </summary>
        </member>
        <member name="P:dotIRC.Properties.Resources.MessageInvalidNickName">
            <summary>
              Looks up a localized string similar to The specified nick name is invalid..
            </summary>
        </member>
        <member name="P:dotIRC.Properties.Resources.MessageInvalidPassword">
            <summary>
              Looks up a localized string similar to The specified password is invalid..
            </summary>
        </member>
        <member name="P:dotIRC.Properties.Resources.MessageInvalidPrefix">
            <summary>
              Looks up a localized string similar to The message prefix &apos;{0}&apos; is invalid..
            </summary>
        </member>
        <member name="P:dotIRC.Properties.Resources.MessageInvalidQuotedChar">
            <summary>
              Looks up a localized string similar to The quoted character &apos;{0}&apos; was not recognised..
            </summary>
        </member>
        <member name="P:dotIRC.Properties.Resources.MessageInvalidRealName">
            <summary>
              Looks up a localized string similar to The specified real name is invalid..
            </summary>
        </member>
        <member name="P:dotIRC.Properties.Resources.MessageInvalidRegistrationInfoObject">
            <summary>
              Looks up a localized string similar to The object provided for registration info is of an unknown type..
            </summary>
        </member>
        <member name="P:dotIRC.Properties.Resources.MessageInvalidServiceRegistrationInfo">
            <summary>
              Looks up a localized string similar to The registration info for a service must have a valid nick name and description..
            </summary>
        </member>
        <member name="P:dotIRC.Properties.Resources.MessageInvalidSource">
            <summary>
              Looks up a localized string similar to The source &apos;{0}&apos; of the message was not recognised as either a server or user..
            </summary>
        </member>
        <member name="P:dotIRC.Properties.Resources.MessageInvalidTag">
            <summary>
              Looks up a localized string similar to The message tag &apos;{0}&apos; is invalid..
            </summary>
        </member>
        <member name="P:dotIRC.Properties.Resources.MessageInvalidTargetName">
            <summary>
              Looks up a localized string similar to A target name may not contain any &apos;,&apos; character..
            </summary>
        </member>
        <member name="P:dotIRC.Properties.Resources.MessageInvalidTrailingParameter">
            <summary>
              Looks up a localized string similar to The trailing parameter &apos;{0}&apos; is invalid..
            </summary>
        </member>
        <member name="P:dotIRC.Properties.Resources.MessageInvalidUrlScheme">
            <summary>
              Looks up a localized string similar to The URL scheme &apos;{0}&apos; is not valid..
            </summary>
        </member>
        <member name="P:dotIRC.Properties.Resources.MessageInvalidUserMode">
            <summary>
              Looks up a localized string similar to The specified user mode is invalid..
            </summary>
        </member>
        <member name="P:dotIRC.Properties.Resources.MessageInvalidUserName">
            <summary>
              Looks up a localized string similar to The specified user name is invalid..
            </summary>
        </member>
        <member name="P:dotIRC.Properties.Resources.MessageInvalidUserRegistrationInfo">
            <summary>
              Looks up a localized string similar to The registration info for a user must have a valid nick name and user name..
            </summary>
        </member>
        <member name="P:dotIRC.Properties.Resources.MessageISupportPrefixInvalid">
            <summary>
              Looks up a localized string similar to The ISUPPORT message sent by the server contains an invalid PREFIX parameter..
            </summary>
        </member>
        <member name="P:dotIRC.Properties.Resources.MessageNotEnoughModeParameters">
            <summary>
              Looks up a localized string similar to Not enough mode parameters were specified for the given modes..
            </summary>
        </member>
        <member name="P:dotIRC.Properties.Resources.MessageNoValidAddress">
            <summary>
              Looks up a localized string similar to The host name &apos;{0}&apos; does not resolve to a valid IP address..
            </summary>
        </member>
        <member name="P:dotIRC.Properties.Resources.MessageRawMessageTooLong">
            <summary>
              Looks up a localized string similar to The length of a raw message must not exceed {0} characters..
            </summary>
        </member>
        <member name="P:dotIRC.Properties.Resources.MessageSourceNotUser">
            <summary>
              Looks up a localized string similar to The message source &apos;{0}&apos; is not a user..
            </summary>
        </member>
        <member name="P:dotIRC.Properties.Resources.MessageTargetMaskInvalidType">
            <summary>
              Looks up a localized string similar to The type of the given target mask &apos;{0}&apos; is invalid..
            </summary>
        </member>
        <member name="P:dotIRC.Properties.Resources.MessageTargetMaskTooShort">
            <summary>
              Looks up a localized string similar to The target mask must be contain at least two characters..
            </summary>
        </member>
        <member name="P:dotIRC.Properties.Resources.MessageTooManyModeParameters">
            <summary>
              Looks up a localized string similar to No more than 3 mode parameters may be sent per message..
            </summary>
        </member>
        <member name="P:dotIRC.Properties.Resources.MessageTooManyParams">
            <summary>
              Looks up a localized string similar to No more than 15 command parameters may be specified..
            </summary>
        </member>
        <member name="P:dotIRC.Properties.Resources.MessageValueCannotBeEmptyString">
            <summary>
              Looks up a localized string similar to The value cannot be an empty string.
            </summary>
        </member>
    </members>
</doc>
